// megafunction wizard: %LPM_DIVIDE%
// GENERATION: STANDARD
// VERSION: WM1.0
// MODULE: LPM_DIVIDE 

// ============================================================
// File Name: divider.v
// Megafunction Name(s):
// 			LPM_DIVIDE
//
// Simulation Library Files(s):
// 			lpm
// ============================================================
// ************************************************************
// THIS IS A WIZARD-GENERATED FILE. DO NOT EDIT THIS FILE!
//
// 20.1.1 Build 720 11/11/2020 SJ Lite Edition
// ************************************************************


//Copyright (C) 2020  Intel Corporation. All rights reserved.
//Your use of Intel Corporation's design tools, logic functions 
//and other software and tools, and any partner logic 
//functions, and any output files from any of the foregoing 
//(including device programming or simulation files), and any 
//associated documentation or information are expressly subject 
//to the terms and conditions of the Intel Program License 
//Subscription Agreement, the Intel Quartus Prime License Agreement,
//the Intel FPGA IP License Agreement, or other applicable license
//agreement, including, without limitation, that your use is for
//the sole purpose of programming logic devices manufactured by
//Intel and sold by Intel or its authorized distributors.  Please
//refer to the applicable agreement for further details, at
//https://fpgasoftware.intel.com/eula.


//lpm_divide DEVICE_FAMILY="Cyclone V" LPM_DREPRESENTATION="UNSIGNED" LPM_NREPRESENTATION="UNSIGNED" LPM_PIPELINE=10 LPM_REMAINDERPOSITIVE="TRUE" LPM_WIDTHD=24 LPM_WIDTHN=24 aclr clock denom numer quotient remain
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_abs 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_divide 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ cbx_util_mgl 2020:11:11:17:06:46:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



//sign_div_unsign DEN_REPRESENTATION="UNSIGNED" DEN_WIDTH=24 LPM_PIPELINE=10 MAXIMIZE_SPEED=5 NUM_REPRESENTATION="UNSIGNED" NUM_WIDTH=24 SKIP_BITS=0 aclr clock denominator numerator quotient remainder
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_abs 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_divide 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ cbx_util_mgl 2020:11:11:17:06:46:SJ  VERSION_END


//alt_u_div DEVICE_FAMILY="Cyclone V" LPM_PIPELINE=10 MAXIMIZE_SPEED=5 SKIP_BITS=0 WIDTH_D=24 WIDTH_N=24 WIDTH_Q=24 WIDTH_R=24 aclr clock denominator numerator quotient remainder
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_abs 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_lpm_divide 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ cbx_util_mgl 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=1 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=2 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=11 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=12 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=13 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=14 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=15 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=16 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=17 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=18 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=19 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=20 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=3 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=21 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=22 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=23 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=24 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=4 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=5 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=6 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=7 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=8 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=9 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END


//lpm_add_sub DEVICE_FAMILY="Cyclone V" LPM_DIRECTION="SUB" LPM_WIDTH=10 cout dataa datab result
//VERSION_BEGIN 20.1 cbx_cycloneii 2020:11:11:17:06:45:SJ cbx_lpm_add_sub 2020:11:11:17:06:45:SJ cbx_mgl 2020:11:11:17:08:38:SJ cbx_nadder 2020:11:11:17:06:46:SJ cbx_stratix 2020:11:11:17:06:46:SJ cbx_stratixii 2020:11:11:17:06:46:SJ  VERSION_END

//synthesis_resources = lut 324 reg 960 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
(* ALTERA_ATTRIBUTE = {"{-to DFFQuotient[0]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[1]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[2]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[3]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[4]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[5]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[6]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[7]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[8]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[9]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[10]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[11]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[12]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[13]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[14]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[15]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[16]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[17]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[18]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[19]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[20]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[21]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[22]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[23]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[24]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[25]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[26]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[27]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[28]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[29]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[30]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[31]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[32]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[33]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[34]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[35]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[36]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[37]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[38]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[39]} POWER_UP_LEVEL=HIGH;",
		"{-to DFFQuotient[40]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[41]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[42]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[43]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[44]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[45]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[46]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[47]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[48]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[49]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[50]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[51]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[52]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[53]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[54]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[55]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[56]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[57]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[58]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[59]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[60]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[61]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[62]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[63]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[64]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[65]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[66]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[67]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[68]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[69]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[70]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[71]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[72]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[73]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[74]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[75]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[76]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[77]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[78]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[79]} POWER_UP_LEVEL=HIGH;",
		"{-to DFFQuotient[80]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[81]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[82]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[83]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[84]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[85]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[86]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[87]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[88]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[89]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[90]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[91]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[92]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[93]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[94]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[95]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[96]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[97]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[98]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[99]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[100]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[101]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[102]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[103]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[104]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[105]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[106]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[107]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[108]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[109]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[110]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[111]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[112]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[113]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[114]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[115]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[116]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[117]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[118]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[119]} POWER_UP_LEVEL=LOW;",
		"{-to DFFQuotient[120]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[121]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[122]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[123]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[124]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[125]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[126]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[127]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[128]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[129]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[130]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[131]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[132]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[133]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[134]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[135]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[136]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[137]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[138]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[139]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[140]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[141]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[142]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[143]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[144]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[145]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[146]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[147]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[148]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[149]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[150]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[151]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[152]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[153]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[154]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[155]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[156]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[157]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[158]} POWER_UP_LEVEL=LOW;",
		"{-to DFFQuotient[159]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[160]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[161]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[162]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[163]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[164]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[165]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[166]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[167]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[168]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[169]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[170]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[171]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[172]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[173]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[174]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[175]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[176]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[177]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[178]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[179]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[180]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[181]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[182]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[183]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[184]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[185]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[186]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[187]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[188]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[189]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[190]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[191]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[192]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[193]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[194]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[195]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[196]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[197]} POWER_UP_LEVEL=LOW;",
		"{-to DFFQuotient[198]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[199]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[200]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[201]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[202]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[203]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[204]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[205]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[206]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[207]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[208]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[209]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[210]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[211]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[212]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[213]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[214]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[215]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[216]} POWER_UP_LEVEL=HIGH;{-to DFFQuotient[217]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[218]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[219]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[220]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[221]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[222]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[223]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[224]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[225]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[226]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[227]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[228]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[229]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[230]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[231]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[232]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[233]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[234]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[235]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[236]} POWER_UP_LEVEL=LOW;",
		"{-to DFFQuotient[237]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[238]} POWER_UP_LEVEL=LOW;{-to DFFQuotient[239]} POWER_UP_LEVEL=LOW"} *)
module  divider_alt_u_div
	( 
	aclr,
	clock,
	denominator,
	numerator,
	quotient,
	remainder) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   [23:0]  denominator;
	input   [23:0]  numerator;
	output   [23:0]  quotient;
	output   [23:0]  remainder;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	(* ALTERA_ATTRIBUTE = {"POWER_UP_LEVEL=HIGH"} *)
	reg	[239:0]	DFFDenominator;
	reg	[239:0]	DFFNumerator;
	wire	[239:0]	wire_DFFQuotient_d;
	reg	[239:0]	DFFQuotient;
	reg	[239:0]	DFFStage;
	wire	[1:0]	wire_add_sub_0_result_int;
	wire	wire_add_sub_0_cout;
	wire	[0:0]	wire_add_sub_0_dataa;
	wire	[0:0]	wire_add_sub_0_datab;
	wire	[0:0]	wire_add_sub_0_result;
	wire	[2:0]	wire_add_sub_1_result_int;
	wire	wire_add_sub_1_cout;
	wire	[1:0]	wire_add_sub_1_dataa;
	wire	[1:0]	wire_add_sub_1_datab;
	wire	[1:0]	wire_add_sub_1_result;
	wire	[11:0]	wire_add_sub_10_result_int;
	wire	wire_add_sub_10_cout;
	wire	[10:0]	wire_add_sub_10_dataa;
	wire	[10:0]	wire_add_sub_10_datab;
	wire	[10:0]	wire_add_sub_10_result;
	wire	[12:0]	wire_add_sub_11_result_int;
	wire	wire_add_sub_11_cout;
	wire	[11:0]	wire_add_sub_11_dataa;
	wire	[11:0]	wire_add_sub_11_datab;
	wire	[11:0]	wire_add_sub_11_result;
	wire	[13:0]	wire_add_sub_12_result_int;
	wire	wire_add_sub_12_cout;
	wire	[12:0]	wire_add_sub_12_dataa;
	wire	[12:0]	wire_add_sub_12_datab;
	wire	[12:0]	wire_add_sub_12_result;
	wire	[14:0]	wire_add_sub_13_result_int;
	wire	wire_add_sub_13_cout;
	wire	[13:0]	wire_add_sub_13_dataa;
	wire	[13:0]	wire_add_sub_13_datab;
	wire	[13:0]	wire_add_sub_13_result;
	wire	[15:0]	wire_add_sub_14_result_int;
	wire	wire_add_sub_14_cout;
	wire	[14:0]	wire_add_sub_14_dataa;
	wire	[14:0]	wire_add_sub_14_datab;
	wire	[14:0]	wire_add_sub_14_result;
	wire	[16:0]	wire_add_sub_15_result_int;
	wire	wire_add_sub_15_cout;
	wire	[15:0]	wire_add_sub_15_dataa;
	wire	[15:0]	wire_add_sub_15_datab;
	wire	[15:0]	wire_add_sub_15_result;
	wire	[17:0]	wire_add_sub_16_result_int;
	wire	wire_add_sub_16_cout;
	wire	[16:0]	wire_add_sub_16_dataa;
	wire	[16:0]	wire_add_sub_16_datab;
	wire	[16:0]	wire_add_sub_16_result;
	wire	[18:0]	wire_add_sub_17_result_int;
	wire	wire_add_sub_17_cout;
	wire	[17:0]	wire_add_sub_17_dataa;
	wire	[17:0]	wire_add_sub_17_datab;
	wire	[17:0]	wire_add_sub_17_result;
	wire	[19:0]	wire_add_sub_18_result_int;
	wire	wire_add_sub_18_cout;
	wire	[18:0]	wire_add_sub_18_dataa;
	wire	[18:0]	wire_add_sub_18_datab;
	wire	[18:0]	wire_add_sub_18_result;
	wire	[20:0]	wire_add_sub_19_result_int;
	wire	wire_add_sub_19_cout;
	wire	[19:0]	wire_add_sub_19_dataa;
	wire	[19:0]	wire_add_sub_19_datab;
	wire	[19:0]	wire_add_sub_19_result;
	wire	[3:0]	wire_add_sub_2_result_int;
	wire	wire_add_sub_2_cout;
	wire	[2:0]	wire_add_sub_2_dataa;
	wire	[2:0]	wire_add_sub_2_datab;
	wire	[2:0]	wire_add_sub_2_result;
	wire	[21:0]	wire_add_sub_20_result_int;
	wire	wire_add_sub_20_cout;
	wire	[20:0]	wire_add_sub_20_dataa;
	wire	[20:0]	wire_add_sub_20_datab;
	wire	[20:0]	wire_add_sub_20_result;
	wire	[22:0]	wire_add_sub_21_result_int;
	wire	wire_add_sub_21_cout;
	wire	[21:0]	wire_add_sub_21_dataa;
	wire	[21:0]	wire_add_sub_21_datab;
	wire	[21:0]	wire_add_sub_21_result;
	wire	[23:0]	wire_add_sub_22_result_int;
	wire	wire_add_sub_22_cout;
	wire	[22:0]	wire_add_sub_22_dataa;
	wire	[22:0]	wire_add_sub_22_datab;
	wire	[22:0]	wire_add_sub_22_result;
	wire	[24:0]	wire_add_sub_23_result_int;
	wire	wire_add_sub_23_cout;
	wire	[23:0]	wire_add_sub_23_dataa;
	wire	[23:0]	wire_add_sub_23_datab;
	wire	[23:0]	wire_add_sub_23_result;
	wire	[4:0]	wire_add_sub_3_result_int;
	wire	wire_add_sub_3_cout;
	wire	[3:0]	wire_add_sub_3_dataa;
	wire	[3:0]	wire_add_sub_3_datab;
	wire	[3:0]	wire_add_sub_3_result;
	wire	[5:0]	wire_add_sub_4_result_int;
	wire	wire_add_sub_4_cout;
	wire	[4:0]	wire_add_sub_4_dataa;
	wire	[4:0]	wire_add_sub_4_datab;
	wire	[4:0]	wire_add_sub_4_result;
	wire	[6:0]	wire_add_sub_5_result_int;
	wire	wire_add_sub_5_cout;
	wire	[5:0]	wire_add_sub_5_dataa;
	wire	[5:0]	wire_add_sub_5_datab;
	wire	[5:0]	wire_add_sub_5_result;
	wire	[7:0]	wire_add_sub_6_result_int;
	wire	wire_add_sub_6_cout;
	wire	[6:0]	wire_add_sub_6_dataa;
	wire	[6:0]	wire_add_sub_6_datab;
	wire	[6:0]	wire_add_sub_6_result;
	wire	[8:0]	wire_add_sub_7_result_int;
	wire	wire_add_sub_7_cout;
	wire	[7:0]	wire_add_sub_7_dataa;
	wire	[7:0]	wire_add_sub_7_datab;
	wire	[7:0]	wire_add_sub_7_result;
	wire	[9:0]	wire_add_sub_8_result_int;
	wire	wire_add_sub_8_cout;
	wire	[8:0]	wire_add_sub_8_dataa;
	wire	[8:0]	wire_add_sub_8_datab;
	wire	[8:0]	wire_add_sub_8_result;
	wire	[10:0]	wire_add_sub_9_result_int;
	wire	wire_add_sub_9_cout;
	wire	[9:0]	wire_add_sub_9_dataa;
	wire	[9:0]	wire_add_sub_9_datab;
	wire	[9:0]	wire_add_sub_9_result;
	wire clk_en;
	wire  [624:0]  DenominatorIn;
	wire  [624:0]  DenominatorIn_tmp;
	wire  gnd_wire;
	wire  [599:0]  nose;
	wire  [599:0]  NumeratorIn;
	wire  [599:0]  NumeratorIn_tmp;
	wire  [575:0]  prestg;
	wire  [23:0]  quotient_tmp;
	wire  [599:0]  sel;
	wire  [599:0]  selnose;
	wire  [599:0]  StageIn;
	wire  [599:0]  StageIn_tmp;
	wire  [575:0]  StageOut;
	wire  vcc_wire;

	// synopsys translate_off
	initial
		DFFDenominator = {240{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFDenominator <= {240{1'b1}};
		else if  (clk_en == 1'b1)   DFFDenominator <= {DFFDenominator[215:0], denominator};
	// synopsys translate_off
	initial
		DFFNumerator = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFNumerator <= 240'b0;
		else if  (clk_en == 1'b1)   DFFNumerator <= {DFFNumerator[215:0], numerator};
	// synopsys translate_off
	initial
		DFFQuotient[0:0] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[0:0] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[0:0] <= wire_DFFQuotient_d[0:0];
	// synopsys translate_off
	initial
		DFFQuotient[1:1] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[1:1] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[1:1] <= wire_DFFQuotient_d[1:1];
	// synopsys translate_off
	initial
		DFFQuotient[2:2] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[2:2] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[2:2] <= wire_DFFQuotient_d[2:2];
	// synopsys translate_off
	initial
		DFFQuotient[3:3] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[3:3] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[3:3] <= wire_DFFQuotient_d[3:3];
	// synopsys translate_off
	initial
		DFFQuotient[4:4] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[4:4] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[4:4] <= wire_DFFQuotient_d[4:4];
	// synopsys translate_off
	initial
		DFFQuotient[5:5] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[5:5] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[5:5] <= wire_DFFQuotient_d[5:5];
	// synopsys translate_off
	initial
		DFFQuotient[6:6] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[6:6] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[6:6] <= wire_DFFQuotient_d[6:6];
	// synopsys translate_off
	initial
		DFFQuotient[7:7] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[7:7] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[7:7] <= wire_DFFQuotient_d[7:7];
	// synopsys translate_off
	initial
		DFFQuotient[8:8] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[8:8] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[8:8] <= wire_DFFQuotient_d[8:8];
	// synopsys translate_off
	initial
		DFFQuotient[9:9] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[9:9] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[9:9] <= wire_DFFQuotient_d[9:9];
	// synopsys translate_off
	initial
		DFFQuotient[10:10] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[10:10] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[10:10] <= wire_DFFQuotient_d[10:10];
	// synopsys translate_off
	initial
		DFFQuotient[11:11] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[11:11] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[11:11] <= wire_DFFQuotient_d[11:11];
	// synopsys translate_off
	initial
		DFFQuotient[12:12] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[12:12] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[12:12] <= wire_DFFQuotient_d[12:12];
	// synopsys translate_off
	initial
		DFFQuotient[13:13] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[13:13] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[13:13] <= wire_DFFQuotient_d[13:13];
	// synopsys translate_off
	initial
		DFFQuotient[14:14] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[14:14] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[14:14] <= wire_DFFQuotient_d[14:14];
	// synopsys translate_off
	initial
		DFFQuotient[15:15] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[15:15] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[15:15] <= wire_DFFQuotient_d[15:15];
	// synopsys translate_off
	initial
		DFFQuotient[16:16] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[16:16] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[16:16] <= wire_DFFQuotient_d[16:16];
	// synopsys translate_off
	initial
		DFFQuotient[17:17] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[17:17] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[17:17] <= wire_DFFQuotient_d[17:17];
	// synopsys translate_off
	initial
		DFFQuotient[18:18] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[18:18] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[18:18] <= wire_DFFQuotient_d[18:18];
	// synopsys translate_off
	initial
		DFFQuotient[19:19] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[19:19] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[19:19] <= wire_DFFQuotient_d[19:19];
	// synopsys translate_off
	initial
		DFFQuotient[20:20] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[20:20] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[20:20] <= wire_DFFQuotient_d[20:20];
	// synopsys translate_off
	initial
		DFFQuotient[21:21] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[21:21] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[21:21] <= wire_DFFQuotient_d[21:21];
	// synopsys translate_off
	initial
		DFFQuotient[22:22] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[22:22] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[22:22] <= wire_DFFQuotient_d[22:22];
	// synopsys translate_off
	initial
		DFFQuotient[23:23] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[23:23] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[23:23] <= wire_DFFQuotient_d[23:23];
	// synopsys translate_off
	initial
		DFFQuotient[24:24] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[24:24] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[24:24] <= wire_DFFQuotient_d[24:24];
	// synopsys translate_off
	initial
		DFFQuotient[25:25] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[25:25] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[25:25] <= wire_DFFQuotient_d[25:25];
	// synopsys translate_off
	initial
		DFFQuotient[26:26] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[26:26] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[26:26] <= wire_DFFQuotient_d[26:26];
	// synopsys translate_off
	initial
		DFFQuotient[27:27] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[27:27] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[27:27] <= wire_DFFQuotient_d[27:27];
	// synopsys translate_off
	initial
		DFFQuotient[28:28] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[28:28] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[28:28] <= wire_DFFQuotient_d[28:28];
	// synopsys translate_off
	initial
		DFFQuotient[29:29] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[29:29] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[29:29] <= wire_DFFQuotient_d[29:29];
	// synopsys translate_off
	initial
		DFFQuotient[30:30] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[30:30] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[30:30] <= wire_DFFQuotient_d[30:30];
	// synopsys translate_off
	initial
		DFFQuotient[31:31] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[31:31] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[31:31] <= wire_DFFQuotient_d[31:31];
	// synopsys translate_off
	initial
		DFFQuotient[32:32] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[32:32] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[32:32] <= wire_DFFQuotient_d[32:32];
	// synopsys translate_off
	initial
		DFFQuotient[33:33] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[33:33] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[33:33] <= wire_DFFQuotient_d[33:33];
	// synopsys translate_off
	initial
		DFFQuotient[34:34] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[34:34] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[34:34] <= wire_DFFQuotient_d[34:34];
	// synopsys translate_off
	initial
		DFFQuotient[35:35] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[35:35] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[35:35] <= wire_DFFQuotient_d[35:35];
	// synopsys translate_off
	initial
		DFFQuotient[36:36] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[36:36] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[36:36] <= wire_DFFQuotient_d[36:36];
	// synopsys translate_off
	initial
		DFFQuotient[37:37] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[37:37] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[37:37] <= wire_DFFQuotient_d[37:37];
	// synopsys translate_off
	initial
		DFFQuotient[38:38] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[38:38] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[38:38] <= wire_DFFQuotient_d[38:38];
	// synopsys translate_off
	initial
		DFFQuotient[39:39] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[39:39] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[39:39] <= wire_DFFQuotient_d[39:39];
	// synopsys translate_off
	initial
		DFFQuotient[40:40] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[40:40] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[40:40] <= wire_DFFQuotient_d[40:40];
	// synopsys translate_off
	initial
		DFFQuotient[41:41] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[41:41] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[41:41] <= wire_DFFQuotient_d[41:41];
	// synopsys translate_off
	initial
		DFFQuotient[42:42] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[42:42] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[42:42] <= wire_DFFQuotient_d[42:42];
	// synopsys translate_off
	initial
		DFFQuotient[43:43] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[43:43] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[43:43] <= wire_DFFQuotient_d[43:43];
	// synopsys translate_off
	initial
		DFFQuotient[44:44] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[44:44] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[44:44] <= wire_DFFQuotient_d[44:44];
	// synopsys translate_off
	initial
		DFFQuotient[45:45] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[45:45] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[45:45] <= wire_DFFQuotient_d[45:45];
	// synopsys translate_off
	initial
		DFFQuotient[46:46] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[46:46] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[46:46] <= wire_DFFQuotient_d[46:46];
	// synopsys translate_off
	initial
		DFFQuotient[47:47] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[47:47] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[47:47] <= wire_DFFQuotient_d[47:47];
	// synopsys translate_off
	initial
		DFFQuotient[48:48] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[48:48] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[48:48] <= wire_DFFQuotient_d[48:48];
	// synopsys translate_off
	initial
		DFFQuotient[49:49] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[49:49] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[49:49] <= wire_DFFQuotient_d[49:49];
	// synopsys translate_off
	initial
		DFFQuotient[50:50] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[50:50] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[50:50] <= wire_DFFQuotient_d[50:50];
	// synopsys translate_off
	initial
		DFFQuotient[51:51] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[51:51] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[51:51] <= wire_DFFQuotient_d[51:51];
	// synopsys translate_off
	initial
		DFFQuotient[52:52] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[52:52] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[52:52] <= wire_DFFQuotient_d[52:52];
	// synopsys translate_off
	initial
		DFFQuotient[53:53] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[53:53] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[53:53] <= wire_DFFQuotient_d[53:53];
	// synopsys translate_off
	initial
		DFFQuotient[54:54] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[54:54] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[54:54] <= wire_DFFQuotient_d[54:54];
	// synopsys translate_off
	initial
		DFFQuotient[55:55] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[55:55] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[55:55] <= wire_DFFQuotient_d[55:55];
	// synopsys translate_off
	initial
		DFFQuotient[56:56] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[56:56] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[56:56] <= wire_DFFQuotient_d[56:56];
	// synopsys translate_off
	initial
		DFFQuotient[57:57] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[57:57] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[57:57] <= wire_DFFQuotient_d[57:57];
	// synopsys translate_off
	initial
		DFFQuotient[58:58] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[58:58] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[58:58] <= wire_DFFQuotient_d[58:58];
	// synopsys translate_off
	initial
		DFFQuotient[59:59] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[59:59] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[59:59] <= wire_DFFQuotient_d[59:59];
	// synopsys translate_off
	initial
		DFFQuotient[60:60] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[60:60] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[60:60] <= wire_DFFQuotient_d[60:60];
	// synopsys translate_off
	initial
		DFFQuotient[61:61] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[61:61] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[61:61] <= wire_DFFQuotient_d[61:61];
	// synopsys translate_off
	initial
		DFFQuotient[62:62] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[62:62] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[62:62] <= wire_DFFQuotient_d[62:62];
	// synopsys translate_off
	initial
		DFFQuotient[63:63] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[63:63] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[63:63] <= wire_DFFQuotient_d[63:63];
	// synopsys translate_off
	initial
		DFFQuotient[64:64] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[64:64] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[64:64] <= wire_DFFQuotient_d[64:64];
	// synopsys translate_off
	initial
		DFFQuotient[65:65] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[65:65] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[65:65] <= wire_DFFQuotient_d[65:65];
	// synopsys translate_off
	initial
		DFFQuotient[66:66] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[66:66] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[66:66] <= wire_DFFQuotient_d[66:66];
	// synopsys translate_off
	initial
		DFFQuotient[67:67] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[67:67] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[67:67] <= wire_DFFQuotient_d[67:67];
	// synopsys translate_off
	initial
		DFFQuotient[68:68] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[68:68] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[68:68] <= wire_DFFQuotient_d[68:68];
	// synopsys translate_off
	initial
		DFFQuotient[69:69] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[69:69] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[69:69] <= wire_DFFQuotient_d[69:69];
	// synopsys translate_off
	initial
		DFFQuotient[70:70] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[70:70] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[70:70] <= wire_DFFQuotient_d[70:70];
	// synopsys translate_off
	initial
		DFFQuotient[71:71] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[71:71] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[71:71] <= wire_DFFQuotient_d[71:71];
	// synopsys translate_off
	initial
		DFFQuotient[72:72] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[72:72] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[72:72] <= wire_DFFQuotient_d[72:72];
	// synopsys translate_off
	initial
		DFFQuotient[73:73] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[73:73] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[73:73] <= wire_DFFQuotient_d[73:73];
	// synopsys translate_off
	initial
		DFFQuotient[74:74] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[74:74] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[74:74] <= wire_DFFQuotient_d[74:74];
	// synopsys translate_off
	initial
		DFFQuotient[75:75] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[75:75] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[75:75] <= wire_DFFQuotient_d[75:75];
	// synopsys translate_off
	initial
		DFFQuotient[76:76] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[76:76] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[76:76] <= wire_DFFQuotient_d[76:76];
	// synopsys translate_off
	initial
		DFFQuotient[77:77] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[77:77] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[77:77] <= wire_DFFQuotient_d[77:77];
	// synopsys translate_off
	initial
		DFFQuotient[78:78] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[78:78] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[78:78] <= wire_DFFQuotient_d[78:78];
	// synopsys translate_off
	initial
		DFFQuotient[79:79] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[79:79] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[79:79] <= wire_DFFQuotient_d[79:79];
	// synopsys translate_off
	initial
		DFFQuotient[80:80] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[80:80] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[80:80] <= wire_DFFQuotient_d[80:80];
	// synopsys translate_off
	initial
		DFFQuotient[81:81] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[81:81] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[81:81] <= wire_DFFQuotient_d[81:81];
	// synopsys translate_off
	initial
		DFFQuotient[82:82] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[82:82] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[82:82] <= wire_DFFQuotient_d[82:82];
	// synopsys translate_off
	initial
		DFFQuotient[83:83] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[83:83] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[83:83] <= wire_DFFQuotient_d[83:83];
	// synopsys translate_off
	initial
		DFFQuotient[84:84] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[84:84] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[84:84] <= wire_DFFQuotient_d[84:84];
	// synopsys translate_off
	initial
		DFFQuotient[85:85] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[85:85] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[85:85] <= wire_DFFQuotient_d[85:85];
	// synopsys translate_off
	initial
		DFFQuotient[86:86] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[86:86] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[86:86] <= wire_DFFQuotient_d[86:86];
	// synopsys translate_off
	initial
		DFFQuotient[87:87] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[87:87] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[87:87] <= wire_DFFQuotient_d[87:87];
	// synopsys translate_off
	initial
		DFFQuotient[88:88] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[88:88] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[88:88] <= wire_DFFQuotient_d[88:88];
	// synopsys translate_off
	initial
		DFFQuotient[89:89] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[89:89] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[89:89] <= wire_DFFQuotient_d[89:89];
	// synopsys translate_off
	initial
		DFFQuotient[90:90] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[90:90] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[90:90] <= wire_DFFQuotient_d[90:90];
	// synopsys translate_off
	initial
		DFFQuotient[91:91] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[91:91] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[91:91] <= wire_DFFQuotient_d[91:91];
	// synopsys translate_off
	initial
		DFFQuotient[92:92] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[92:92] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[92:92] <= wire_DFFQuotient_d[92:92];
	// synopsys translate_off
	initial
		DFFQuotient[93:93] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[93:93] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[93:93] <= wire_DFFQuotient_d[93:93];
	// synopsys translate_off
	initial
		DFFQuotient[94:94] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[94:94] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[94:94] <= wire_DFFQuotient_d[94:94];
	// synopsys translate_off
	initial
		DFFQuotient[95:95] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[95:95] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[95:95] <= wire_DFFQuotient_d[95:95];
	// synopsys translate_off
	initial
		DFFQuotient[96:96] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[96:96] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[96:96] <= wire_DFFQuotient_d[96:96];
	// synopsys translate_off
	initial
		DFFQuotient[97:97] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[97:97] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[97:97] <= wire_DFFQuotient_d[97:97];
	// synopsys translate_off
	initial
		DFFQuotient[98:98] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[98:98] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[98:98] <= wire_DFFQuotient_d[98:98];
	// synopsys translate_off
	initial
		DFFQuotient[99:99] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[99:99] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[99:99] <= wire_DFFQuotient_d[99:99];
	// synopsys translate_off
	initial
		DFFQuotient[100:100] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[100:100] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[100:100] <= wire_DFFQuotient_d[100:100];
	// synopsys translate_off
	initial
		DFFQuotient[101:101] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[101:101] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[101:101] <= wire_DFFQuotient_d[101:101];
	// synopsys translate_off
	initial
		DFFQuotient[102:102] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[102:102] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[102:102] <= wire_DFFQuotient_d[102:102];
	// synopsys translate_off
	initial
		DFFQuotient[103:103] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[103:103] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[103:103] <= wire_DFFQuotient_d[103:103];
	// synopsys translate_off
	initial
		DFFQuotient[104:104] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[104:104] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[104:104] <= wire_DFFQuotient_d[104:104];
	// synopsys translate_off
	initial
		DFFQuotient[105:105] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[105:105] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[105:105] <= wire_DFFQuotient_d[105:105];
	// synopsys translate_off
	initial
		DFFQuotient[106:106] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[106:106] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[106:106] <= wire_DFFQuotient_d[106:106];
	// synopsys translate_off
	initial
		DFFQuotient[107:107] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[107:107] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[107:107] <= wire_DFFQuotient_d[107:107];
	// synopsys translate_off
	initial
		DFFQuotient[108:108] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[108:108] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[108:108] <= wire_DFFQuotient_d[108:108];
	// synopsys translate_off
	initial
		DFFQuotient[109:109] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[109:109] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[109:109] <= wire_DFFQuotient_d[109:109];
	// synopsys translate_off
	initial
		DFFQuotient[110:110] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[110:110] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[110:110] <= wire_DFFQuotient_d[110:110];
	// synopsys translate_off
	initial
		DFFQuotient[111:111] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[111:111] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[111:111] <= wire_DFFQuotient_d[111:111];
	// synopsys translate_off
	initial
		DFFQuotient[112:112] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[112:112] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[112:112] <= wire_DFFQuotient_d[112:112];
	// synopsys translate_off
	initial
		DFFQuotient[113:113] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[113:113] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[113:113] <= wire_DFFQuotient_d[113:113];
	// synopsys translate_off
	initial
		DFFQuotient[114:114] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[114:114] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[114:114] <= wire_DFFQuotient_d[114:114];
	// synopsys translate_off
	initial
		DFFQuotient[115:115] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[115:115] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[115:115] <= wire_DFFQuotient_d[115:115];
	// synopsys translate_off
	initial
		DFFQuotient[116:116] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[116:116] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[116:116] <= wire_DFFQuotient_d[116:116];
	// synopsys translate_off
	initial
		DFFQuotient[117:117] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[117:117] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[117:117] <= wire_DFFQuotient_d[117:117];
	// synopsys translate_off
	initial
		DFFQuotient[118:118] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[118:118] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[118:118] <= wire_DFFQuotient_d[118:118];
	// synopsys translate_off
	initial
		DFFQuotient[119:119] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[119:119] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[119:119] <= wire_DFFQuotient_d[119:119];
	// synopsys translate_off
	initial
		DFFQuotient[120:120] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[120:120] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[120:120] <= wire_DFFQuotient_d[120:120];
	// synopsys translate_off
	initial
		DFFQuotient[121:121] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[121:121] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[121:121] <= wire_DFFQuotient_d[121:121];
	// synopsys translate_off
	initial
		DFFQuotient[122:122] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[122:122] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[122:122] <= wire_DFFQuotient_d[122:122];
	// synopsys translate_off
	initial
		DFFQuotient[123:123] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[123:123] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[123:123] <= wire_DFFQuotient_d[123:123];
	// synopsys translate_off
	initial
		DFFQuotient[124:124] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[124:124] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[124:124] <= wire_DFFQuotient_d[124:124];
	// synopsys translate_off
	initial
		DFFQuotient[125:125] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[125:125] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[125:125] <= wire_DFFQuotient_d[125:125];
	// synopsys translate_off
	initial
		DFFQuotient[126:126] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[126:126] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[126:126] <= wire_DFFQuotient_d[126:126];
	// synopsys translate_off
	initial
		DFFQuotient[127:127] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[127:127] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[127:127] <= wire_DFFQuotient_d[127:127];
	// synopsys translate_off
	initial
		DFFQuotient[128:128] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[128:128] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[128:128] <= wire_DFFQuotient_d[128:128];
	// synopsys translate_off
	initial
		DFFQuotient[129:129] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[129:129] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[129:129] <= wire_DFFQuotient_d[129:129];
	// synopsys translate_off
	initial
		DFFQuotient[130:130] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[130:130] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[130:130] <= wire_DFFQuotient_d[130:130];
	// synopsys translate_off
	initial
		DFFQuotient[131:131] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[131:131] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[131:131] <= wire_DFFQuotient_d[131:131];
	// synopsys translate_off
	initial
		DFFQuotient[132:132] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[132:132] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[132:132] <= wire_DFFQuotient_d[132:132];
	// synopsys translate_off
	initial
		DFFQuotient[133:133] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[133:133] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[133:133] <= wire_DFFQuotient_d[133:133];
	// synopsys translate_off
	initial
		DFFQuotient[134:134] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[134:134] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[134:134] <= wire_DFFQuotient_d[134:134];
	// synopsys translate_off
	initial
		DFFQuotient[135:135] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[135:135] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[135:135] <= wire_DFFQuotient_d[135:135];
	// synopsys translate_off
	initial
		DFFQuotient[136:136] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[136:136] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[136:136] <= wire_DFFQuotient_d[136:136];
	// synopsys translate_off
	initial
		DFFQuotient[137:137] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[137:137] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[137:137] <= wire_DFFQuotient_d[137:137];
	// synopsys translate_off
	initial
		DFFQuotient[138:138] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[138:138] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[138:138] <= wire_DFFQuotient_d[138:138];
	// synopsys translate_off
	initial
		DFFQuotient[139:139] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[139:139] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[139:139] <= wire_DFFQuotient_d[139:139];
	// synopsys translate_off
	initial
		DFFQuotient[140:140] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[140:140] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[140:140] <= wire_DFFQuotient_d[140:140];
	// synopsys translate_off
	initial
		DFFQuotient[141:141] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[141:141] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[141:141] <= wire_DFFQuotient_d[141:141];
	// synopsys translate_off
	initial
		DFFQuotient[142:142] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[142:142] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[142:142] <= wire_DFFQuotient_d[142:142];
	// synopsys translate_off
	initial
		DFFQuotient[143:143] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[143:143] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[143:143] <= wire_DFFQuotient_d[143:143];
	// synopsys translate_off
	initial
		DFFQuotient[144:144] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[144:144] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[144:144] <= wire_DFFQuotient_d[144:144];
	// synopsys translate_off
	initial
		DFFQuotient[145:145] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[145:145] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[145:145] <= wire_DFFQuotient_d[145:145];
	// synopsys translate_off
	initial
		DFFQuotient[146:146] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[146:146] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[146:146] <= wire_DFFQuotient_d[146:146];
	// synopsys translate_off
	initial
		DFFQuotient[147:147] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[147:147] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[147:147] <= wire_DFFQuotient_d[147:147];
	// synopsys translate_off
	initial
		DFFQuotient[148:148] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[148:148] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[148:148] <= wire_DFFQuotient_d[148:148];
	// synopsys translate_off
	initial
		DFFQuotient[149:149] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[149:149] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[149:149] <= wire_DFFQuotient_d[149:149];
	// synopsys translate_off
	initial
		DFFQuotient[150:150] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[150:150] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[150:150] <= wire_DFFQuotient_d[150:150];
	// synopsys translate_off
	initial
		DFFQuotient[151:151] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[151:151] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[151:151] <= wire_DFFQuotient_d[151:151];
	// synopsys translate_off
	initial
		DFFQuotient[152:152] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[152:152] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[152:152] <= wire_DFFQuotient_d[152:152];
	// synopsys translate_off
	initial
		DFFQuotient[153:153] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[153:153] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[153:153] <= wire_DFFQuotient_d[153:153];
	// synopsys translate_off
	initial
		DFFQuotient[154:154] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[154:154] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[154:154] <= wire_DFFQuotient_d[154:154];
	// synopsys translate_off
	initial
		DFFQuotient[155:155] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[155:155] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[155:155] <= wire_DFFQuotient_d[155:155];
	// synopsys translate_off
	initial
		DFFQuotient[156:156] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[156:156] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[156:156] <= wire_DFFQuotient_d[156:156];
	// synopsys translate_off
	initial
		DFFQuotient[157:157] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[157:157] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[157:157] <= wire_DFFQuotient_d[157:157];
	// synopsys translate_off
	initial
		DFFQuotient[158:158] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[158:158] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[158:158] <= wire_DFFQuotient_d[158:158];
	// synopsys translate_off
	initial
		DFFQuotient[159:159] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[159:159] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[159:159] <= wire_DFFQuotient_d[159:159];
	// synopsys translate_off
	initial
		DFFQuotient[160:160] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[160:160] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[160:160] <= wire_DFFQuotient_d[160:160];
	// synopsys translate_off
	initial
		DFFQuotient[161:161] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[161:161] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[161:161] <= wire_DFFQuotient_d[161:161];
	// synopsys translate_off
	initial
		DFFQuotient[162:162] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[162:162] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[162:162] <= wire_DFFQuotient_d[162:162];
	// synopsys translate_off
	initial
		DFFQuotient[163:163] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[163:163] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[163:163] <= wire_DFFQuotient_d[163:163];
	// synopsys translate_off
	initial
		DFFQuotient[164:164] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[164:164] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[164:164] <= wire_DFFQuotient_d[164:164];
	// synopsys translate_off
	initial
		DFFQuotient[165:165] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[165:165] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[165:165] <= wire_DFFQuotient_d[165:165];
	// synopsys translate_off
	initial
		DFFQuotient[166:166] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[166:166] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[166:166] <= wire_DFFQuotient_d[166:166];
	// synopsys translate_off
	initial
		DFFQuotient[167:167] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[167:167] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[167:167] <= wire_DFFQuotient_d[167:167];
	// synopsys translate_off
	initial
		DFFQuotient[168:168] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[168:168] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[168:168] <= wire_DFFQuotient_d[168:168];
	// synopsys translate_off
	initial
		DFFQuotient[169:169] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[169:169] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[169:169] <= wire_DFFQuotient_d[169:169];
	// synopsys translate_off
	initial
		DFFQuotient[170:170] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[170:170] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[170:170] <= wire_DFFQuotient_d[170:170];
	// synopsys translate_off
	initial
		DFFQuotient[171:171] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[171:171] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[171:171] <= wire_DFFQuotient_d[171:171];
	// synopsys translate_off
	initial
		DFFQuotient[172:172] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[172:172] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[172:172] <= wire_DFFQuotient_d[172:172];
	// synopsys translate_off
	initial
		DFFQuotient[173:173] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[173:173] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[173:173] <= wire_DFFQuotient_d[173:173];
	// synopsys translate_off
	initial
		DFFQuotient[174:174] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[174:174] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[174:174] <= wire_DFFQuotient_d[174:174];
	// synopsys translate_off
	initial
		DFFQuotient[175:175] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[175:175] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[175:175] <= wire_DFFQuotient_d[175:175];
	// synopsys translate_off
	initial
		DFFQuotient[176:176] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[176:176] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[176:176] <= wire_DFFQuotient_d[176:176];
	// synopsys translate_off
	initial
		DFFQuotient[177:177] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[177:177] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[177:177] <= wire_DFFQuotient_d[177:177];
	// synopsys translate_off
	initial
		DFFQuotient[178:178] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[178:178] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[178:178] <= wire_DFFQuotient_d[178:178];
	// synopsys translate_off
	initial
		DFFQuotient[179:179] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[179:179] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[179:179] <= wire_DFFQuotient_d[179:179];
	// synopsys translate_off
	initial
		DFFQuotient[180:180] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[180:180] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[180:180] <= wire_DFFQuotient_d[180:180];
	// synopsys translate_off
	initial
		DFFQuotient[181:181] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[181:181] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[181:181] <= wire_DFFQuotient_d[181:181];
	// synopsys translate_off
	initial
		DFFQuotient[182:182] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[182:182] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[182:182] <= wire_DFFQuotient_d[182:182];
	// synopsys translate_off
	initial
		DFFQuotient[183:183] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[183:183] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[183:183] <= wire_DFFQuotient_d[183:183];
	// synopsys translate_off
	initial
		DFFQuotient[184:184] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[184:184] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[184:184] <= wire_DFFQuotient_d[184:184];
	// synopsys translate_off
	initial
		DFFQuotient[185:185] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[185:185] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[185:185] <= wire_DFFQuotient_d[185:185];
	// synopsys translate_off
	initial
		DFFQuotient[186:186] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[186:186] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[186:186] <= wire_DFFQuotient_d[186:186];
	// synopsys translate_off
	initial
		DFFQuotient[187:187] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[187:187] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[187:187] <= wire_DFFQuotient_d[187:187];
	// synopsys translate_off
	initial
		DFFQuotient[188:188] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[188:188] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[188:188] <= wire_DFFQuotient_d[188:188];
	// synopsys translate_off
	initial
		DFFQuotient[189:189] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[189:189] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[189:189] <= wire_DFFQuotient_d[189:189];
	// synopsys translate_off
	initial
		DFFQuotient[190:190] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[190:190] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[190:190] <= wire_DFFQuotient_d[190:190];
	// synopsys translate_off
	initial
		DFFQuotient[191:191] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[191:191] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[191:191] <= wire_DFFQuotient_d[191:191];
	// synopsys translate_off
	initial
		DFFQuotient[192:192] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[192:192] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[192:192] <= wire_DFFQuotient_d[192:192];
	// synopsys translate_off
	initial
		DFFQuotient[193:193] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[193:193] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[193:193] <= wire_DFFQuotient_d[193:193];
	// synopsys translate_off
	initial
		DFFQuotient[194:194] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[194:194] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[194:194] <= wire_DFFQuotient_d[194:194];
	// synopsys translate_off
	initial
		DFFQuotient[195:195] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[195:195] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[195:195] <= wire_DFFQuotient_d[195:195];
	// synopsys translate_off
	initial
		DFFQuotient[196:196] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[196:196] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[196:196] <= wire_DFFQuotient_d[196:196];
	// synopsys translate_off
	initial
		DFFQuotient[197:197] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[197:197] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[197:197] <= wire_DFFQuotient_d[197:197];
	// synopsys translate_off
	initial
		DFFQuotient[198:198] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[198:198] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[198:198] <= wire_DFFQuotient_d[198:198];
	// synopsys translate_off
	initial
		DFFQuotient[199:199] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[199:199] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[199:199] <= wire_DFFQuotient_d[199:199];
	// synopsys translate_off
	initial
		DFFQuotient[200:200] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[200:200] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[200:200] <= wire_DFFQuotient_d[200:200];
	// synopsys translate_off
	initial
		DFFQuotient[201:201] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[201:201] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[201:201] <= wire_DFFQuotient_d[201:201];
	// synopsys translate_off
	initial
		DFFQuotient[202:202] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[202:202] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[202:202] <= wire_DFFQuotient_d[202:202];
	// synopsys translate_off
	initial
		DFFQuotient[203:203] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[203:203] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[203:203] <= wire_DFFQuotient_d[203:203];
	// synopsys translate_off
	initial
		DFFQuotient[204:204] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[204:204] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[204:204] <= wire_DFFQuotient_d[204:204];
	// synopsys translate_off
	initial
		DFFQuotient[205:205] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[205:205] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[205:205] <= wire_DFFQuotient_d[205:205];
	// synopsys translate_off
	initial
		DFFQuotient[206:206] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[206:206] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[206:206] <= wire_DFFQuotient_d[206:206];
	// synopsys translate_off
	initial
		DFFQuotient[207:207] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[207:207] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[207:207] <= wire_DFFQuotient_d[207:207];
	// synopsys translate_off
	initial
		DFFQuotient[208:208] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[208:208] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[208:208] <= wire_DFFQuotient_d[208:208];
	// synopsys translate_off
	initial
		DFFQuotient[209:209] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[209:209] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[209:209] <= wire_DFFQuotient_d[209:209];
	// synopsys translate_off
	initial
		DFFQuotient[210:210] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[210:210] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[210:210] <= wire_DFFQuotient_d[210:210];
	// synopsys translate_off
	initial
		DFFQuotient[211:211] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[211:211] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[211:211] <= wire_DFFQuotient_d[211:211];
	// synopsys translate_off
	initial
		DFFQuotient[212:212] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[212:212] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[212:212] <= wire_DFFQuotient_d[212:212];
	// synopsys translate_off
	initial
		DFFQuotient[213:213] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[213:213] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[213:213] <= wire_DFFQuotient_d[213:213];
	// synopsys translate_off
	initial
		DFFQuotient[214:214] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[214:214] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[214:214] <= wire_DFFQuotient_d[214:214];
	// synopsys translate_off
	initial
		DFFQuotient[215:215] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[215:215] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[215:215] <= wire_DFFQuotient_d[215:215];
	// synopsys translate_off
	initial
		DFFQuotient[216:216] = {1{1'b1}};
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[216:216] <= {1{1'b1}};
		else if  (clk_en == 1'b1)   DFFQuotient[216:216] <= wire_DFFQuotient_d[216:216];
	// synopsys translate_off
	initial
		DFFQuotient[217:217] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[217:217] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[217:217] <= wire_DFFQuotient_d[217:217];
	// synopsys translate_off
	initial
		DFFQuotient[218:218] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[218:218] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[218:218] <= wire_DFFQuotient_d[218:218];
	// synopsys translate_off
	initial
		DFFQuotient[219:219] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[219:219] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[219:219] <= wire_DFFQuotient_d[219:219];
	// synopsys translate_off
	initial
		DFFQuotient[220:220] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[220:220] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[220:220] <= wire_DFFQuotient_d[220:220];
	// synopsys translate_off
	initial
		DFFQuotient[221:221] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[221:221] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[221:221] <= wire_DFFQuotient_d[221:221];
	// synopsys translate_off
	initial
		DFFQuotient[222:222] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[222:222] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[222:222] <= wire_DFFQuotient_d[222:222];
	// synopsys translate_off
	initial
		DFFQuotient[223:223] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[223:223] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[223:223] <= wire_DFFQuotient_d[223:223];
	// synopsys translate_off
	initial
		DFFQuotient[224:224] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[224:224] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[224:224] <= wire_DFFQuotient_d[224:224];
	// synopsys translate_off
	initial
		DFFQuotient[225:225] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[225:225] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[225:225] <= wire_DFFQuotient_d[225:225];
	// synopsys translate_off
	initial
		DFFQuotient[226:226] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[226:226] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[226:226] <= wire_DFFQuotient_d[226:226];
	// synopsys translate_off
	initial
		DFFQuotient[227:227] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[227:227] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[227:227] <= wire_DFFQuotient_d[227:227];
	// synopsys translate_off
	initial
		DFFQuotient[228:228] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[228:228] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[228:228] <= wire_DFFQuotient_d[228:228];
	// synopsys translate_off
	initial
		DFFQuotient[229:229] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[229:229] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[229:229] <= wire_DFFQuotient_d[229:229];
	// synopsys translate_off
	initial
		DFFQuotient[230:230] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[230:230] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[230:230] <= wire_DFFQuotient_d[230:230];
	// synopsys translate_off
	initial
		DFFQuotient[231:231] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[231:231] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[231:231] <= wire_DFFQuotient_d[231:231];
	// synopsys translate_off
	initial
		DFFQuotient[232:232] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[232:232] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[232:232] <= wire_DFFQuotient_d[232:232];
	// synopsys translate_off
	initial
		DFFQuotient[233:233] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[233:233] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[233:233] <= wire_DFFQuotient_d[233:233];
	// synopsys translate_off
	initial
		DFFQuotient[234:234] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[234:234] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[234:234] <= wire_DFFQuotient_d[234:234];
	// synopsys translate_off
	initial
		DFFQuotient[235:235] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[235:235] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[235:235] <= wire_DFFQuotient_d[235:235];
	// synopsys translate_off
	initial
		DFFQuotient[236:236] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[236:236] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[236:236] <= wire_DFFQuotient_d[236:236];
	// synopsys translate_off
	initial
		DFFQuotient[237:237] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[237:237] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[237:237] <= wire_DFFQuotient_d[237:237];
	// synopsys translate_off
	initial
		DFFQuotient[238:238] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[238:238] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[238:238] <= wire_DFFQuotient_d[238:238];
	// synopsys translate_off
	initial
		DFFQuotient[239:239] = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFQuotient[239:239] <= 1'b0;
		else if  (clk_en == 1'b1)   DFFQuotient[239:239] <= wire_DFFQuotient_d[239:239];
	assign
		wire_DFFQuotient_d = {DFFQuotient[215:195], (~ selnose[525]), (~ selnose[550]), vcc_wire, DFFQuotient[191:174], (~ selnose[450]), (~ selnose[475]), (~ selnose[500]), {3{vcc_wire}}, DFFQuotient[167:152], (~ selnose[400]), (~ selnose[425]), {6{vcc_wire}}, DFFQuotient[143:130], (~ selnose[350]), (~ selnose[375]), {8{vcc_wire}}, DFFQuotient[119:109], (~ selnose[275]), (~ selnose[300]), (~ selnose[325]), {10{vcc_wire}}, DFFQuotient[95:87], (~ selnose[225]), (~ selnose[250]), {13{vcc_wire}}, DFFQuotient[71:66], (~ selnose[150]), (~ selnose[175]), (~ selnose[200]), {15{vcc_wire}}, DFFQuotient[47:44], (~ selnose[100]), (~ selnose[125]), {18{vcc_wire}}, DFFQuotient[23:22], (~ selnose[50]), (~ selnose[75]), {20{vcc_wire}}, (~ selnose[0]), (~ selnose[25]), {22{vcc_wire}}};
	// synopsys translate_off
	initial
		DFFStage = 0;
	// synopsys translate_on
	always @ ( posedge clock or  posedge aclr)
		if (aclr == 1'b1) DFFStage <= 240'b0;
		else if  (clk_en == 1'b1)   DFFStage <= {StageOut[551:528], StageOut[503:480], StageOut[431:408], StageOut[383:360], StageOut[335:312], StageOut[263:240], StageOut[215:192], StageOut[143:120], StageOut[95:72], StageOut[47:24]};
	assign
		wire_add_sub_0_result_int = wire_add_sub_0_dataa - wire_add_sub_0_datab;
	assign
		wire_add_sub_0_result = wire_add_sub_0_result_int[0:0],
		wire_add_sub_0_cout = ~wire_add_sub_0_result_int[1:1];
	assign
		wire_add_sub_0_dataa = NumeratorIn[23],
		wire_add_sub_0_datab = DenominatorIn[0];
	assign
		wire_add_sub_1_result_int = wire_add_sub_1_dataa - wire_add_sub_1_datab;
	assign
		wire_add_sub_1_result = wire_add_sub_1_result_int[1:0],
		wire_add_sub_1_cout = ~wire_add_sub_1_result_int[2:2];
	assign
		wire_add_sub_1_dataa = {StageIn[24], NumeratorIn[46]},
		wire_add_sub_1_datab = DenominatorIn[26:25];
	assign
		wire_add_sub_10_result_int = wire_add_sub_10_dataa - wire_add_sub_10_datab;
	assign
		wire_add_sub_10_result = wire_add_sub_10_result_int[10:0],
		wire_add_sub_10_cout = ~wire_add_sub_10_result_int[11:11];
	assign
		wire_add_sub_10_dataa = {StageIn[249:240], NumeratorIn[253]},
		wire_add_sub_10_datab = DenominatorIn[260:250];
	assign
		wire_add_sub_11_result_int = wire_add_sub_11_dataa - wire_add_sub_11_datab;
	assign
		wire_add_sub_11_result = wire_add_sub_11_result_int[11:0],
		wire_add_sub_11_cout = ~wire_add_sub_11_result_int[12:12];
	assign
		wire_add_sub_11_dataa = {StageIn[274:264], NumeratorIn[276]},
		wire_add_sub_11_datab = DenominatorIn[286:275];
	assign
		wire_add_sub_12_result_int = wire_add_sub_12_dataa - wire_add_sub_12_datab;
	assign
		wire_add_sub_12_result = wire_add_sub_12_result_int[12:0],
		wire_add_sub_12_cout = ~wire_add_sub_12_result_int[13:13];
	assign
		wire_add_sub_12_dataa = {StageIn[299:288], NumeratorIn[299]},
		wire_add_sub_12_datab = DenominatorIn[312:300];
	assign
		wire_add_sub_13_result_int = wire_add_sub_13_dataa - wire_add_sub_13_datab;
	assign
		wire_add_sub_13_result = wire_add_sub_13_result_int[13:0],
		wire_add_sub_13_cout = ~wire_add_sub_13_result_int[14:14];
	assign
		wire_add_sub_13_dataa = {StageIn[324:312], NumeratorIn[322]},
		wire_add_sub_13_datab = DenominatorIn[338:325];
	assign
		wire_add_sub_14_result_int = wire_add_sub_14_dataa - wire_add_sub_14_datab;
	assign
		wire_add_sub_14_result = wire_add_sub_14_result_int[14:0],
		wire_add_sub_14_cout = ~wire_add_sub_14_result_int[15:15];
	assign
		wire_add_sub_14_dataa = {StageIn[349:336], NumeratorIn[345]},
		wire_add_sub_14_datab = DenominatorIn[364:350];
	assign
		wire_add_sub_15_result_int = wire_add_sub_15_dataa - wire_add_sub_15_datab;
	assign
		wire_add_sub_15_result = wire_add_sub_15_result_int[15:0],
		wire_add_sub_15_cout = ~wire_add_sub_15_result_int[16:16];
	assign
		wire_add_sub_15_dataa = {StageIn[374:360], NumeratorIn[368]},
		wire_add_sub_15_datab = DenominatorIn[390:375];
	assign
		wire_add_sub_16_result_int = wire_add_sub_16_dataa - wire_add_sub_16_datab;
	assign
		wire_add_sub_16_result = wire_add_sub_16_result_int[16:0],
		wire_add_sub_16_cout = ~wire_add_sub_16_result_int[17:17];
	assign
		wire_add_sub_16_dataa = {StageIn[399:384], NumeratorIn[391]},
		wire_add_sub_16_datab = DenominatorIn[416:400];
	assign
		wire_add_sub_17_result_int = wire_add_sub_17_dataa - wire_add_sub_17_datab;
	assign
		wire_add_sub_17_result = wire_add_sub_17_result_int[17:0],
		wire_add_sub_17_cout = ~wire_add_sub_17_result_int[18:18];
	assign
		wire_add_sub_17_dataa = {StageIn[424:408], NumeratorIn[414]},
		wire_add_sub_17_datab = DenominatorIn[442:425];
	assign
		wire_add_sub_18_result_int = wire_add_sub_18_dataa - wire_add_sub_18_datab;
	assign
		wire_add_sub_18_result = wire_add_sub_18_result_int[18:0],
		wire_add_sub_18_cout = ~wire_add_sub_18_result_int[19:19];
	assign
		wire_add_sub_18_dataa = {StageIn[449:432], NumeratorIn[437]},
		wire_add_sub_18_datab = DenominatorIn[468:450];
	assign
		wire_add_sub_19_result_int = wire_add_sub_19_dataa - wire_add_sub_19_datab;
	assign
		wire_add_sub_19_result = wire_add_sub_19_result_int[19:0],
		wire_add_sub_19_cout = ~wire_add_sub_19_result_int[20:20];
	assign
		wire_add_sub_19_dataa = {StageIn[474:456], NumeratorIn[460]},
		wire_add_sub_19_datab = DenominatorIn[494:475];
	assign
		wire_add_sub_2_result_int = wire_add_sub_2_dataa - wire_add_sub_2_datab;
	assign
		wire_add_sub_2_result = wire_add_sub_2_result_int[2:0],
		wire_add_sub_2_cout = ~wire_add_sub_2_result_int[3:3];
	assign
		wire_add_sub_2_dataa = {StageIn[49:48], NumeratorIn[69]},
		wire_add_sub_2_datab = DenominatorIn[52:50];
	assign
		wire_add_sub_20_result_int = wire_add_sub_20_dataa - wire_add_sub_20_datab;
	assign
		wire_add_sub_20_result = wire_add_sub_20_result_int[20:0],
		wire_add_sub_20_cout = ~wire_add_sub_20_result_int[21:21];
	assign
		wire_add_sub_20_dataa = {StageIn[499:480], NumeratorIn[483]},
		wire_add_sub_20_datab = DenominatorIn[520:500];
	assign
		wire_add_sub_21_result_int = wire_add_sub_21_dataa - wire_add_sub_21_datab;
	assign
		wire_add_sub_21_result = wire_add_sub_21_result_int[21:0],
		wire_add_sub_21_cout = ~wire_add_sub_21_result_int[22:22];
	assign
		wire_add_sub_21_dataa = {StageIn[524:504], NumeratorIn[506]},
		wire_add_sub_21_datab = DenominatorIn[546:525];
	assign
		wire_add_sub_22_result_int = wire_add_sub_22_dataa - wire_add_sub_22_datab;
	assign
		wire_add_sub_22_result = wire_add_sub_22_result_int[22:0],
		wire_add_sub_22_cout = ~wire_add_sub_22_result_int[23:23];
	assign
		wire_add_sub_22_dataa = {StageIn[549:528], NumeratorIn[529]},
		wire_add_sub_22_datab = DenominatorIn[572:550];
	assign
		wire_add_sub_23_result_int = wire_add_sub_23_dataa - wire_add_sub_23_datab;
	assign
		wire_add_sub_23_result = wire_add_sub_23_result_int[23:0],
		wire_add_sub_23_cout = ~wire_add_sub_23_result_int[24:24];
	assign
		wire_add_sub_23_dataa = {StageIn[574:552], NumeratorIn[552]},
		wire_add_sub_23_datab = DenominatorIn[598:575];
	assign
		wire_add_sub_3_result_int = wire_add_sub_3_dataa - wire_add_sub_3_datab;
	assign
		wire_add_sub_3_result = wire_add_sub_3_result_int[3:0],
		wire_add_sub_3_cout = ~wire_add_sub_3_result_int[4:4];
	assign
		wire_add_sub_3_dataa = {StageIn[74:72], NumeratorIn[92]},
		wire_add_sub_3_datab = DenominatorIn[78:75];
	assign
		wire_add_sub_4_result_int = wire_add_sub_4_dataa - wire_add_sub_4_datab;
	assign
		wire_add_sub_4_result = wire_add_sub_4_result_int[4:0],
		wire_add_sub_4_cout = ~wire_add_sub_4_result_int[5:5];
	assign
		wire_add_sub_4_dataa = {StageIn[99:96], NumeratorIn[115]},
		wire_add_sub_4_datab = DenominatorIn[104:100];
	assign
		wire_add_sub_5_result_int = wire_add_sub_5_dataa - wire_add_sub_5_datab;
	assign
		wire_add_sub_5_result = wire_add_sub_5_result_int[5:0],
		wire_add_sub_5_cout = ~wire_add_sub_5_result_int[6:6];
	assign
		wire_add_sub_5_dataa = {StageIn[124:120], NumeratorIn[138]},
		wire_add_sub_5_datab = DenominatorIn[130:125];
	assign
		wire_add_sub_6_result_int = wire_add_sub_6_dataa - wire_add_sub_6_datab;
	assign
		wire_add_sub_6_result = wire_add_sub_6_result_int[6:0],
		wire_add_sub_6_cout = ~wire_add_sub_6_result_int[7:7];
	assign
		wire_add_sub_6_dataa = {StageIn[149:144], NumeratorIn[161]},
		wire_add_sub_6_datab = DenominatorIn[156:150];
	assign
		wire_add_sub_7_result_int = wire_add_sub_7_dataa - wire_add_sub_7_datab;
	assign
		wire_add_sub_7_result = wire_add_sub_7_result_int[7:0],
		wire_add_sub_7_cout = ~wire_add_sub_7_result_int[8:8];
	assign
		wire_add_sub_7_dataa = {StageIn[174:168], NumeratorIn[184]},
		wire_add_sub_7_datab = DenominatorIn[182:175];
	assign
		wire_add_sub_8_result_int = wire_add_sub_8_dataa - wire_add_sub_8_datab;
	assign
		wire_add_sub_8_result = wire_add_sub_8_result_int[8:0],
		wire_add_sub_8_cout = ~wire_add_sub_8_result_int[9:9];
	assign
		wire_add_sub_8_dataa = {StageIn[199:192], NumeratorIn[207]},
		wire_add_sub_8_datab = DenominatorIn[208:200];
	assign
		wire_add_sub_9_result_int = wire_add_sub_9_dataa - wire_add_sub_9_datab;
	assign
		wire_add_sub_9_result = wire_add_sub_9_result_int[9:0],
		wire_add_sub_9_cout = ~wire_add_sub_9_result_int[10:10];
	assign
		wire_add_sub_9_dataa = {StageIn[224:216], NumeratorIn[230]},
		wire_add_sub_9_datab = DenominatorIn[234:225];
	assign
		clk_en = 1'b1,
		DenominatorIn = DenominatorIn_tmp,
		DenominatorIn_tmp = {DenominatorIn[599:575], {gnd_wire, DFFDenominator[239:216]}, DenominatorIn[549:525], {gnd_wire, DFFDenominator[215:192]}, DenominatorIn[499:450], {gnd_wire, DFFDenominator[191:168]}, DenominatorIn[424:400], {gnd_wire, DFFDenominator[167:144]}, DenominatorIn[374:350], {gnd_wire, DFFDenominator[143:120]}, DenominatorIn[324:275], {gnd_wire, DFFDenominator[119:96]}, DenominatorIn[249:225], {gnd_wire, DFFDenominator[95:72]}, DenominatorIn[199:150], {gnd_wire, DFFDenominator[71:48]}, DenominatorIn[124:100], {gnd_wire, DFFDenominator[47:24]}, DenominatorIn[74:50], {gnd_wire, DFFDenominator[23:0]}, DenominatorIn[24:0], {gnd_wire, denominator}},
		gnd_wire = 1'b0,
		nose = {{24{1'b0}}, wire_add_sub_23_cout, {24{1'b0}}, wire_add_sub_22_cout, {24{1'b0}}, wire_add_sub_21_cout, {24{1'b0}}, wire_add_sub_20_cout, {24{1'b0}}, wire_add_sub_19_cout, {24{1'b0}}, wire_add_sub_18_cout, {24{1'b0}}, wire_add_sub_17_cout, {24{1'b0}}, wire_add_sub_16_cout, {24{1'b0}}, wire_add_sub_15_cout, {24{1'b0}}, wire_add_sub_14_cout, {24{1'b0}}, wire_add_sub_13_cout, {24{1'b0}}, wire_add_sub_12_cout, {24{1'b0}}, wire_add_sub_11_cout, {24{1'b0}}, wire_add_sub_10_cout, {24{1'b0}}, wire_add_sub_9_cout, {24{1'b0}}, wire_add_sub_8_cout, {24{1'b0}}, wire_add_sub_7_cout, {24{1'b0}}, wire_add_sub_6_cout, {24{1'b0}}, wire_add_sub_5_cout, {24{1'b0}}, wire_add_sub_4_cout, {24{1'b0}}, wire_add_sub_3_cout, {24{1'b0}}, wire_add_sub_2_cout, {24{1'b0}}, wire_add_sub_1_cout, {24{1'b0}}, wire_add_sub_0_cout},
		NumeratorIn = NumeratorIn_tmp,
		NumeratorIn_tmp = {NumeratorIn[575:552], DFFNumerator[239:216], NumeratorIn[527:504], DFFNumerator[215:192], NumeratorIn[479:432], DFFNumerator[191:168], NumeratorIn[407:384], DFFNumerator[167:144], NumeratorIn[359:336], DFFNumerator[143:120], NumeratorIn[311:264], DFFNumerator[119:96], NumeratorIn[239:216], DFFNumerator[95:72], NumeratorIn[191:144], DFFNumerator[71:48], NumeratorIn[119:96], DFFNumerator[47:24], NumeratorIn[71:48], DFFNumerator[23:0], NumeratorIn[23:0], numerator},
		prestg = {wire_add_sub_23_result, {1{1'b0}}, wire_add_sub_22_result, {2{1'b0}}, wire_add_sub_21_result, {3{1'b0}}, wire_add_sub_20_result, {4{1'b0}}, wire_add_sub_19_result, {5{1'b0}}, wire_add_sub_18_result, {6{1'b0}}, wire_add_sub_17_result, {7{1'b0}}, wire_add_sub_16_result, {8{1'b0}}, wire_add_sub_15_result, {9{1'b0}}, wire_add_sub_14_result, {10{1'b0}}, wire_add_sub_13_result, {11{1'b0}}, wire_add_sub_12_result, {12{1'b0}}, wire_add_sub_11_result, {13{1'b0}}, wire_add_sub_10_result, {14{1'b0}}, wire_add_sub_9_result, {15{1'b0}}, wire_add_sub_8_result, {16{1'b0}}, wire_add_sub_7_result, {17{1'b0}}, wire_add_sub_6_result, {18{1'b0}}, wire_add_sub_5_result, {19{1'b0}}, wire_add_sub_4_result, {20{1'b0}}, wire_add_sub_3_result, {21{1'b0}}, wire_add_sub_2_result, {22{1'b0}}, wire_add_sub_1_result, {23{1'b0}}, wire_add_sub_0_result},
		quotient = quotient_tmp,
		quotient_tmp = {DFFQuotient[239:217], (~ selnose[575])},
		remainder = StageIn[599:576],
		sel = {gnd_wire, (sel[599] | DenominatorIn[623]), (sel[598] | DenominatorIn[622]), (sel[597] | DenominatorIn[621]), (sel[596] | DenominatorIn[620]), (sel[595] | DenominatorIn[619]), (sel[594] | DenominatorIn[618]), (sel[593] | DenominatorIn[617]), (sel[592] | DenominatorIn[616]), (sel[591] | DenominatorIn[615]), (sel[590] | DenominatorIn[614]), (sel[589] | DenominatorIn[613]), (sel[588] | DenominatorIn[612]), (sel[587] | DenominatorIn[611]), (sel[586] | DenominatorIn[610]), (sel[585] | DenominatorIn[609]), (sel[584] | DenominatorIn[608]), (sel[583] | DenominatorIn[607]), (sel[582] | DenominatorIn[606]), (sel[581] | DenominatorIn[605]), (sel[580] | DenominatorIn[604]), (sel[579] | DenominatorIn[603]), (sel[578] | DenominatorIn[602]), (sel[577] | DenominatorIn[601]), gnd_wire, (sel[575] | DenominatorIn[598]), (sel[574] | DenominatorIn[597]), (sel[573] | DenominatorIn[596]), (sel[572] | DenominatorIn[595]), (sel[571] | DenominatorIn[594]), (sel[570] | DenominatorIn[593]), (sel[569] | DenominatorIn[592]), (sel[568] | DenominatorIn[591]), (sel[567] | DenominatorIn[590]), (sel[566] | DenominatorIn[589]), (sel[565] | DenominatorIn[588]), (sel[564] | DenominatorIn[587]), (sel[563] | DenominatorIn[586]), (sel[562] | DenominatorIn[585]), (sel[561] | DenominatorIn[584]), (sel[560] | DenominatorIn[583]), (sel[559] | DenominatorIn[582]), (sel[558] | DenominatorIn[581]), (sel[557] | DenominatorIn[580]), (sel[556] | DenominatorIn[579]), (sel[555] | DenominatorIn[578]), (sel[554] | DenominatorIn[577]), (sel[553] | DenominatorIn[576]), gnd_wire, (sel[551] | DenominatorIn[573]), (sel[550] | DenominatorIn[572]), (sel[549] | DenominatorIn[571]), (sel[548] | DenominatorIn[570]), (sel[547] | DenominatorIn[569]), (sel[546] | DenominatorIn[568]), (sel[545] | DenominatorIn[567]), (sel[544] | DenominatorIn[566]), (sel[543] | DenominatorIn[565]), (sel[542] | DenominatorIn[564]), (sel[541] | DenominatorIn[563]), (sel[540] | DenominatorIn[562]), (sel[539] | DenominatorIn[561]), (sel[538] | DenominatorIn[560]), (sel[537] | DenominatorIn[559]
), (sel[536] | DenominatorIn[558]), (sel[535] | DenominatorIn[557]), (sel[534] | DenominatorIn[556]), (sel[533] | DenominatorIn[555]), (sel[532] | DenominatorIn[554]), (sel[531] | DenominatorIn[553]), (sel[530] | DenominatorIn[552]), (sel[529] | DenominatorIn[551]), gnd_wire, (sel[527] | DenominatorIn[548]), (sel[526] | DenominatorIn[547]), (sel[525] | DenominatorIn[546]), (sel[524] | DenominatorIn[545]), (sel[523] | DenominatorIn[544]), (sel[522] | DenominatorIn[543]), (sel[521] | DenominatorIn[542]), (sel[520] | DenominatorIn[541]), (sel[519] | DenominatorIn[540]), (sel[518] | DenominatorIn[539]), (sel[517] | DenominatorIn[538]), (sel[516] | DenominatorIn[537]), (sel[515] | DenominatorIn[536]), (sel[514] | DenominatorIn[535]), (sel[513] | DenominatorIn[534]), (sel[512] | DenominatorIn[533]), (sel[511] | DenominatorIn[532]), (sel[510] | DenominatorIn[531]), (sel[509] | DenominatorIn[530]), (sel[508] | DenominatorIn[529]), (sel[507] | DenominatorIn[528]), (sel[506] | DenominatorIn[527]), (sel[505] | DenominatorIn[526]), gnd_wire, (sel[503] | DenominatorIn[523]), (sel[502] | DenominatorIn[522]), (sel[501] | DenominatorIn[521]), (sel[500] | DenominatorIn[520]), (sel[499] | DenominatorIn[519]), (sel[498] | DenominatorIn[518]), (sel[497] | DenominatorIn[517]), (sel[496] | DenominatorIn[516]), (sel[495] | DenominatorIn[515]), (sel[494] | DenominatorIn[514]), (sel[493] | DenominatorIn[513]), (sel[492] | DenominatorIn[512]), (sel[491] | DenominatorIn[511]), (sel[490] | DenominatorIn[510]), (sel[489] | DenominatorIn[509]), (sel[488] | DenominatorIn[508]), (sel[487] | DenominatorIn[507]), (sel[486] | DenominatorIn[506]), (sel[485] | DenominatorIn[505]), (sel[484] | DenominatorIn[504]), (sel[483] | DenominatorIn[503]), (sel[482] | DenominatorIn[502]), (sel[481] | DenominatorIn[501]), gnd_wire, (sel[479] | DenominatorIn[498]), (sel[478] | DenominatorIn[497]), (sel[477] | DenominatorIn[496]), (sel[476] | DenominatorIn[495]), (sel[475] | DenominatorIn[494]), (sel[474] | DenominatorIn[493]), (sel[473] | DenominatorIn[492]), (sel[472]
 | DenominatorIn[491]), (sel[471] | DenominatorIn[490]), (sel[470] | DenominatorIn[489]), (sel[469] | DenominatorIn[488]), (sel[468] | DenominatorIn[487]), (sel[467] | DenominatorIn[486]), (sel[466] | DenominatorIn[485]), (sel[465] | DenominatorIn[484]), (sel[464] | DenominatorIn[483]), (sel[463] | DenominatorIn[482]), (sel[462] | DenominatorIn[481]), (sel[461] | DenominatorIn[480]), (sel[460] | DenominatorIn[479]), (sel[459] | DenominatorIn[478]), (sel[458] | DenominatorIn[477]), (sel[457] | DenominatorIn[476]), gnd_wire, (sel[455] | DenominatorIn[473]), (sel[454] | DenominatorIn[472]), (sel[453] | DenominatorIn[471]), (sel[452] | DenominatorIn[470]), (sel[451] | DenominatorIn[469]), (sel[450] | DenominatorIn[468]), (sel[449] | DenominatorIn[467]), (sel[448] | DenominatorIn[466]), (sel[447] | DenominatorIn[465]), (sel[446] | DenominatorIn[464]), (sel[445] | DenominatorIn[463]), (sel[444] | DenominatorIn[462]), (sel[443] | DenominatorIn[461]), (sel[442] | DenominatorIn[460]), (sel[441] | DenominatorIn[459]), (sel[440] | DenominatorIn[458]), (sel[439] | DenominatorIn[457]), (sel[438] | DenominatorIn[456]), (sel[437] | DenominatorIn[455]), (sel[436] | DenominatorIn[454]), (sel[435] | DenominatorIn[453]), (sel[434] | DenominatorIn[452]), (sel[433] | DenominatorIn[451]), gnd_wire, (sel[431] | DenominatorIn[448]), (sel[430] | DenominatorIn[447]), (sel[429] | DenominatorIn[446]), (sel[428] | DenominatorIn[445]), (sel[427] | DenominatorIn[444]), (sel[426] | DenominatorIn[443]), (sel[425] | DenominatorIn[442]), (sel[424] | DenominatorIn[441]), (sel[423] | DenominatorIn[440]), (sel[422] | DenominatorIn[439]), (sel[421] | DenominatorIn[438]), (sel[420] | DenominatorIn[437]), (sel[419] | DenominatorIn[436]), (sel[418] | DenominatorIn[435]), (sel[417] | DenominatorIn[434]), (sel[416] | DenominatorIn[433]), (sel[415] | DenominatorIn[432]), (sel[414] | DenominatorIn[431]), (sel[413] | DenominatorIn[430]), (sel[412] | DenominatorIn[429]), (sel[411] | DenominatorIn[428]), (sel[410] | DenominatorIn[427]), (sel[409] | DenominatorIn[426]
), gnd_wire, (sel[407] | DenominatorIn[423]), (sel[406] | DenominatorIn[422]), (sel[405] | DenominatorIn[421]), (sel[404] | DenominatorIn[420]), (sel[403] | DenominatorIn[419]), (sel[402] | DenominatorIn[418]), (sel[401] | DenominatorIn[417]), (sel[400] | DenominatorIn[416]), (sel[399] | DenominatorIn[415]), (sel[398] | DenominatorIn[414]), (sel[397] | DenominatorIn[413]), (sel[396] | DenominatorIn[412]), (sel[395] | DenominatorIn[411]), (sel[394] | DenominatorIn[410]), (sel[393] | DenominatorIn[409]), (sel[392] | DenominatorIn[408]), (sel[391] | DenominatorIn[407]), (sel[390] | DenominatorIn[406]), (sel[389] | DenominatorIn[405]), (sel[388] | DenominatorIn[404]), (sel[387] | DenominatorIn[403]), (sel[386] | DenominatorIn[402]), (sel[385] | DenominatorIn[401]), gnd_wire, (sel[383] | DenominatorIn[398]), (sel[382] | DenominatorIn[397]), (sel[381] | DenominatorIn[396]), (sel[380] | DenominatorIn[395]), (sel[379] | DenominatorIn[394]), (sel[378] | DenominatorIn[393]), (sel[377] | DenominatorIn[392]), (sel[376] | DenominatorIn[391]), (sel[375] | DenominatorIn[390]), (sel[374] | DenominatorIn[389]), (sel[373] | DenominatorIn[388]), (sel[372] | DenominatorIn[387]), (sel[371] | DenominatorIn[386]), (sel[370] | DenominatorIn[385]), (sel[369] | DenominatorIn[384]), (sel[368] | DenominatorIn[383]), (sel[367] | DenominatorIn[382]), (sel[366] | DenominatorIn[381]), (sel[365] | DenominatorIn[380]), (sel[364] | DenominatorIn[379]), (sel[363] | DenominatorIn[378]), (sel[362] | DenominatorIn[377]), (sel[361] | DenominatorIn[376]), gnd_wire, (sel[359] | DenominatorIn[373]), (sel[358] | DenominatorIn[372]), (sel[357] | DenominatorIn[371]), (sel[356] | DenominatorIn[370]), (sel[355] | DenominatorIn[369]), (sel[354] | DenominatorIn[368]), (sel[353] | DenominatorIn[367]), (sel[352] | DenominatorIn[366]), (sel[351] | DenominatorIn[365]), (sel[350] | DenominatorIn[364]), (sel[349] | DenominatorIn[363]), (sel[348] | DenominatorIn[362]), (sel[347] | DenominatorIn[361]), (sel[346] | DenominatorIn[360]), (sel[345] | DenominatorIn[359]), (sel[344]
 | DenominatorIn[358]), (sel[343] | DenominatorIn[357]), (sel[342] | DenominatorIn[356]), (sel[341] | DenominatorIn[355]), (sel[340] | DenominatorIn[354]), (sel[339] | DenominatorIn[353]), (sel[338] | DenominatorIn[352]), (sel[337] | DenominatorIn[351]), gnd_wire, (sel[335] | DenominatorIn[348]), (sel[334] | DenominatorIn[347]), (sel[333] | DenominatorIn[346]), (sel[332] | DenominatorIn[345]), (sel[331] | DenominatorIn[344]), (sel[330] | DenominatorIn[343]), (sel[329] | DenominatorIn[342]), (sel[328] | DenominatorIn[341]), (sel[327] | DenominatorIn[340]), (sel[326] | DenominatorIn[339]), (sel[325] | DenominatorIn[338]), (sel[324] | DenominatorIn[337]), (sel[323] | DenominatorIn[336]), (sel[322] | DenominatorIn[335]), (sel[321] | DenominatorIn[334]), (sel[320] | DenominatorIn[333]), (sel[319] | DenominatorIn[332]), (sel[318] | DenominatorIn[331]), (sel[317] | DenominatorIn[330]), (sel[316] | DenominatorIn[329]), (sel[315] | DenominatorIn[328]), (sel[314] | DenominatorIn[327]), (sel[313] | DenominatorIn[326]), gnd_wire, (sel[311] | DenominatorIn[323]), (sel[310] | DenominatorIn[322]), (sel[309] | DenominatorIn[321]), (sel[308] | DenominatorIn[320]), (sel[307] | DenominatorIn[319]), (sel[306] | DenominatorIn[318]), (sel[305] | DenominatorIn[317]), (sel[304] | DenominatorIn[316]), (sel[303] | DenominatorIn[315]), (sel[302] | DenominatorIn[314]), (sel[301] | DenominatorIn[313]), (sel[300] | DenominatorIn[312]), (sel[299] | DenominatorIn[311]), (sel[298] | DenominatorIn[310]), (sel[297] | DenominatorIn[309]), (sel[296] | DenominatorIn[308]), (sel[295] | DenominatorIn[307]), (sel[294] | DenominatorIn[306]), (sel[293] | DenominatorIn[305]), (sel[292] | DenominatorIn[304]), (sel[291] | DenominatorIn[303]), (sel[290] | DenominatorIn[302]), (sel[289] | DenominatorIn[301]), gnd_wire, (sel[287] | DenominatorIn[298]), (sel[286] | DenominatorIn[297]), (sel[285] | DenominatorIn[296]), (sel[284] | DenominatorIn[295]), (sel[283] | DenominatorIn[294]), (sel[282] | DenominatorIn[293]), (sel[281] | DenominatorIn[292]), (sel[280] | DenominatorIn[291]
), (sel[279] | DenominatorIn[290]), (sel[278] | DenominatorIn[289]), (sel[277] | DenominatorIn[288]), (sel[276] | DenominatorIn[287]), (sel[275] | DenominatorIn[286]), (sel[274] | DenominatorIn[285]), (sel[273] | DenominatorIn[284]), (sel[272] | DenominatorIn[283]), (sel[271] | DenominatorIn[282]), (sel[270] | DenominatorIn[281]), (sel[269] | DenominatorIn[280]), (sel[268] | DenominatorIn[279]), (sel[267] | DenominatorIn[278]), (sel[266] | DenominatorIn[277]), (sel[265] | DenominatorIn[276]), gnd_wire, (sel[263] | DenominatorIn[273]), (sel[262] | DenominatorIn[272]), (sel[261] | DenominatorIn[271]), (sel[260] | DenominatorIn[270]), (sel[259] | DenominatorIn[269]), (sel[258] | DenominatorIn[268]), (sel[257] | DenominatorIn[267]), (sel[256] | DenominatorIn[266]), (sel[255] | DenominatorIn[265]), (sel[254] | DenominatorIn[264]), (sel[253] | DenominatorIn[263]), (sel[252] | DenominatorIn[262]), (sel[251] | DenominatorIn[261]), (sel[250] | DenominatorIn[260]), (sel[249] | DenominatorIn[259]), (sel[248] | DenominatorIn[258]), (sel[247] | DenominatorIn[257]), (sel[246] | DenominatorIn[256]), (sel[245] | DenominatorIn[255]), (sel[244] | DenominatorIn[254]), (sel[243] | DenominatorIn[253]), (sel[242] | DenominatorIn[252]), (sel[241] | DenominatorIn[251]), gnd_wire, (sel[239] | DenominatorIn[248]), (sel[238] | DenominatorIn[247]), (sel[237] | DenominatorIn[246]), (sel[236] | DenominatorIn[245]), (sel[235] | DenominatorIn[244]), (sel[234] | DenominatorIn[243]), (sel[233] | DenominatorIn[242]), (sel[232] | DenominatorIn[241]), (sel[231] | DenominatorIn[240]), (sel[230] | DenominatorIn[239]), (sel[229] | DenominatorIn[238]), (sel[228] | DenominatorIn[237]), (sel[227] | DenominatorIn[236]), (sel[226] | DenominatorIn[235]), (sel[225] | DenominatorIn[234]), (sel[224] | DenominatorIn[233]), (sel[223] | DenominatorIn[232]), (sel[222] | DenominatorIn[231]), (sel[221] | DenominatorIn[230]), (sel[220] | DenominatorIn[229]), (sel[219] | DenominatorIn[228]), (sel[218] | DenominatorIn[227]), (sel[217] | DenominatorIn[226]), gnd_wire, (sel[215]
 | DenominatorIn[223]), (sel[214] | DenominatorIn[222]), (sel[213] | DenominatorIn[221]), (sel[212] | DenominatorIn[220]), (sel[211] | DenominatorIn[219]), (sel[210] | DenominatorIn[218]), (sel[209] | DenominatorIn[217]), (sel[208] | DenominatorIn[216]), (sel[207] | DenominatorIn[215]), (sel[206] | DenominatorIn[214]), (sel[205] | DenominatorIn[213]), (sel[204] | DenominatorIn[212]), (sel[203] | DenominatorIn[211]), (sel[202] | DenominatorIn[210]), (sel[201] | DenominatorIn[209]), (sel[200] | DenominatorIn[208]), (sel[199] | DenominatorIn[207]), (sel[198] | DenominatorIn[206]), (sel[197] | DenominatorIn[205]), (sel[196] | DenominatorIn[204]), (sel[195] | DenominatorIn[203]), (sel[194] | DenominatorIn[202]), (sel[193] | DenominatorIn[201]), gnd_wire, (sel[191] | DenominatorIn[198]), (sel[190] | DenominatorIn[197]), (sel[189] | DenominatorIn[196]), (sel[188] | DenominatorIn[195]), (sel[187] | DenominatorIn[194]), (sel[186] | DenominatorIn[193]), (sel[185] | DenominatorIn[192]), (sel[184] | DenominatorIn[191]), (sel[183] | DenominatorIn[190]), (sel[182] | DenominatorIn[189]), (sel[181] | DenominatorIn[188]), (sel[180] | DenominatorIn[187]), (sel[179] | DenominatorIn[186]), (sel[178] | DenominatorIn[185]), (sel[177] | DenominatorIn[184]), (sel[176] | DenominatorIn[183]), (sel[175] | DenominatorIn[182]), (sel[174] | DenominatorIn[181]), (sel[173] | DenominatorIn[180]), (sel[172] | DenominatorIn[179]), (sel[171] | DenominatorIn[178]), (sel[170] | DenominatorIn[177]), (sel[169] | DenominatorIn[176]), gnd_wire, (sel[167] | DenominatorIn[173]), (sel[166] | DenominatorIn[172]), (sel[165] | DenominatorIn[171]), (sel[164] | DenominatorIn[170]), (sel[163] | DenominatorIn[169]), (sel[162] | DenominatorIn[168]), (sel[161] | DenominatorIn[167]), (sel[160] | DenominatorIn[166]), (sel[159] | DenominatorIn[165]), (sel[158] | DenominatorIn[164]), (sel[157] | DenominatorIn[163]), (sel[156] | DenominatorIn[162]), (sel[155] | DenominatorIn[161]), (sel[154] | DenominatorIn[160]), (sel[153] | DenominatorIn[159]), (sel[152] | DenominatorIn[158]
), (sel[151] | DenominatorIn[157]), (sel[150] | DenominatorIn[156]), (sel[149] | DenominatorIn[155]), (sel[148] | DenominatorIn[154]), (sel[147] | DenominatorIn[153]), (sel[146] | DenominatorIn[152]), (sel[145] | DenominatorIn[151]), gnd_wire, (sel[143] | DenominatorIn[148]), (sel[142] | DenominatorIn[147]), (sel[141] | DenominatorIn[146]), (sel[140] | DenominatorIn[145]), (sel[139] | DenominatorIn[144]), (sel[138] | DenominatorIn[143]), (sel[137] | DenominatorIn[142]), (sel[136] | DenominatorIn[141]), (sel[135] | DenominatorIn[140]), (sel[134] | DenominatorIn[139]), (sel[133] | DenominatorIn[138]), (sel[132] | DenominatorIn[137]), (sel[131] | DenominatorIn[136]), (sel[130] | DenominatorIn[135]), (sel[129] | DenominatorIn[134]), (sel[128] | DenominatorIn[133]), (sel[127] | DenominatorIn[132]), (sel[126] | DenominatorIn[131]), (sel[125] | DenominatorIn[130]), (sel[124] | DenominatorIn[129]), (sel[123] | DenominatorIn[128]), (sel[122] | DenominatorIn[127]), (sel[121] | DenominatorIn[126]), gnd_wire, (sel[119] | DenominatorIn[123]), (sel[118] | DenominatorIn[122]), (sel[117] | DenominatorIn[121]), (sel[116] | DenominatorIn[120]), (sel[115] | DenominatorIn[119]), (sel[114] | DenominatorIn[118]), (sel[113] | DenominatorIn[117]), (sel[112] | DenominatorIn[116]), (sel[111] | DenominatorIn[115]), (sel[110] | DenominatorIn[114]), (sel[109] | DenominatorIn[113]), (sel[108] | DenominatorIn[112]), (sel[107] | DenominatorIn[111]), (sel[106] | DenominatorIn[110]), (sel[105] | DenominatorIn[109]), (sel[104] | DenominatorIn[108]), (sel[103] | DenominatorIn[107]), (sel[102] | DenominatorIn[106]), (sel[101] | DenominatorIn[105]), (sel[100] | DenominatorIn[104]), (sel[99] | DenominatorIn[103]), (sel[98] | DenominatorIn[102]), (sel[97] | DenominatorIn[101]), gnd_wire, (sel[95] | DenominatorIn[98]), (sel[94] | DenominatorIn[97]), (sel[93] | DenominatorIn[96]), (sel[92] | DenominatorIn[95]), (sel[91] | DenominatorIn[94]), (sel[90] | DenominatorIn[93]), (sel[89] | DenominatorIn[92]), (sel[88] | DenominatorIn[91]), (sel[87] | DenominatorIn[90]
), (sel[86] | DenominatorIn[89]), (sel[85] | DenominatorIn[88]), (sel[84] | DenominatorIn[87]), (sel[83] | DenominatorIn[86]), (sel[82] | DenominatorIn[85]), (sel[81] | DenominatorIn[84]), (sel[80] | DenominatorIn[83]), (sel[79] | DenominatorIn[82]), (sel[78] | DenominatorIn[81]), (sel[77] | DenominatorIn[80]), (sel[76] | DenominatorIn[79]), (sel[75] | DenominatorIn[78]), (sel[74] | DenominatorIn[77]), (sel[73] | DenominatorIn[76]), gnd_wire, (sel[71] | DenominatorIn[73]), (sel[70] | DenominatorIn[72]), (sel[69] | DenominatorIn[71]), (sel[68] | DenominatorIn[70]), (sel[67] | DenominatorIn[69]), (sel[66] | DenominatorIn[68]), (sel[65] | DenominatorIn[67]), (sel[64] | DenominatorIn[66]), (sel[63] | DenominatorIn[65]), (sel[62] | DenominatorIn[64]), (sel[61] | DenominatorIn[63]), (sel[60] | DenominatorIn[62]), (sel[59] | DenominatorIn[61]), (sel[58] | DenominatorIn[60]), (sel[57] | DenominatorIn[59]), (sel[56] | DenominatorIn[58]), (sel[55] | DenominatorIn[57]), (sel[54] | DenominatorIn[56]), (sel[53] | DenominatorIn[55]), (sel[52] | DenominatorIn[54]), (sel[51] | DenominatorIn[53]), (sel[50] | DenominatorIn[52]), (sel[49] | DenominatorIn[51]), gnd_wire, (sel[47] | DenominatorIn[48]), (sel[46] | DenominatorIn[47]), (sel[45] | DenominatorIn[46]), (sel[44] | DenominatorIn[45]), (sel[43] | DenominatorIn[44]), (sel[42] | DenominatorIn[43]), (sel[41] | DenominatorIn[42]), (sel[40] | DenominatorIn[41]), (sel[39] | DenominatorIn[40]), (sel[38] | DenominatorIn[39]), (sel[37] | DenominatorIn[38]), (sel[36] | DenominatorIn[37]), (sel[35] | DenominatorIn[36]), (sel[34] | DenominatorIn[35]), (sel[33] | DenominatorIn[34]), (sel[32] | DenominatorIn[33]), (sel[31] | DenominatorIn[32]), (sel[30] | DenominatorIn[31]), (sel[29] | DenominatorIn[30]), (sel[28] | DenominatorIn[29]), (sel[27] | DenominatorIn[28]), (sel[26] | DenominatorIn[27]), (sel[25] | DenominatorIn[26]), gnd_wire, (sel[23] | DenominatorIn[23]), (sel[22] | DenominatorIn[22]), (sel[21] | DenominatorIn[21]), (sel[20] | DenominatorIn[20]), (sel[19] | DenominatorIn[19]), 
(sel[18] | DenominatorIn[18]), (sel[17] | DenominatorIn[17]), (sel[16] | DenominatorIn[16]), (sel[15] | DenominatorIn[15]), (sel[14] | DenominatorIn[14]), (sel[13] | DenominatorIn[13]), (sel[12] | DenominatorIn[12]), (sel[11] | DenominatorIn[11]), (sel[10] | DenominatorIn[10]), (sel[9] | DenominatorIn[9]), (sel[8] | DenominatorIn[8]), (sel[7] | DenominatorIn[7]), (sel[6] | DenominatorIn[6]), (sel[5] | DenominatorIn[5]), (sel[4] | DenominatorIn[4]), (sel[3] | DenominatorIn[3]), (sel[2] | DenominatorIn[2]), (sel[1] | DenominatorIn[1])},
		selnose = {((~ nose[599]) | sel[599]), ((~ nose[598]) | sel[598]), ((~ nose[597]) | sel[597]), ((~ nose[596]) | sel[596]), ((~ nose[595]) | sel[595]), ((~ nose[594]) | sel[594]), ((~ nose[593]) | sel[593]), ((~ nose[592]) | sel[592]), ((~ nose[591]) | sel[591]), ((~ nose[590]) | sel[590]), ((~ nose[589]) | sel[589]), ((~ nose[588]) | sel[588]), ((~ nose[587]) | sel[587]), ((~ nose[586]) | sel[586]), ((~ nose[585]) | sel[585]), ((~ nose[584]) | sel[584]), ((~ nose[583]) | sel[583]), ((~ nose[582]) | sel[582]), ((~ nose[581]) | sel[581]), ((~ nose[580]) | sel[580]), ((~ nose[579]) | sel[579]), ((~ nose[578]) | sel[578]), ((~ nose[577]) | sel[577]), ((~ nose[576]) | sel[576]), ((~ nose[575]) | sel[575]), ((~ nose[574]) | sel[574]), ((~ nose[573]) | sel[573]), ((~ nose[572]) | sel[572]), ((~ nose[571]) | sel[571]), ((~ nose[570]) | sel[570]), ((~ nose[569]) | sel[569]), ((~ nose[568]) | sel[568]), ((~ nose[567]) | sel[567]), ((~ nose[566]) | sel[566]), ((~ nose[565]) | sel[565]), ((~ nose[564]) | sel[564]), ((~ nose[563]) | sel[563]), ((~ nose[562]) | sel[562]), ((~ nose[561]) | sel[561]), ((~ nose[560]) | sel[560]), ((~ nose[559]) | sel[559]), ((~ nose[558]) | sel[558]), ((~ nose[557]) | sel[557]), ((~ nose[556]) | sel[556]), ((~ nose[555]) | sel[555]), ((~ nose[554]) | sel[554]), ((~ nose[553]) | sel[553]), ((~ nose[552]) | sel[552]), ((~ nose[551]) | sel[551]), ((~ nose[550]) | sel[550]), ((~ nose[549]) | sel[549]), ((~ nose[548]) | sel[548]), ((~ nose[547]) | sel[547]), ((~ nose[546]) | sel[546]), ((~ nose[545]) | sel[545]), ((~ nose[544]) | sel[544]), ((~ nose[543]) | sel[543]), ((~ nose[542]) | sel[542]), ((~ nose[541]) | sel[541]), ((~ nose[540]) | sel[540]), ((~ nose[539]) | sel[539]), ((~ nose[538]) | sel[538]), ((~ nose[537]) | sel[537]), ((~ nose[536]) | sel[536]), ((~ nose[535]) | sel[535]), ((~ nose[534]) | sel[534]), ((~ nose[533]) | sel[533]), ((~ nose[532]) | sel[532]), ((~ nose[531]) | sel[531]), ((~ nose[530]) | sel[530]), ((~ nose[529]) | sel[529]), ((~ nose[528]) | sel[528]), ((~ nose[527]) | sel[527]
), ((~ nose[526]) | sel[526]), ((~ nose[525]) | sel[525]), ((~ nose[524]) | sel[524]), ((~ nose[523]) | sel[523]), ((~ nose[522]) | sel[522]), ((~ nose[521]) | sel[521]), ((~ nose[520]) | sel[520]), ((~ nose[519]) | sel[519]), ((~ nose[518]) | sel[518]), ((~ nose[517]) | sel[517]), ((~ nose[516]) | sel[516]), ((~ nose[515]) | sel[515]), ((~ nose[514]) | sel[514]), ((~ nose[513]) | sel[513]), ((~ nose[512]) | sel[512]), ((~ nose[511]) | sel[511]), ((~ nose[510]) | sel[510]), ((~ nose[509]) | sel[509]), ((~ nose[508]) | sel[508]), ((~ nose[507]) | sel[507]), ((~ nose[506]) | sel[506]), ((~ nose[505]) | sel[505]), ((~ nose[504]) | sel[504]), ((~ nose[503]) | sel[503]), ((~ nose[502]) | sel[502]), ((~ nose[501]) | sel[501]), ((~ nose[500]) | sel[500]), ((~ nose[499]) | sel[499]), ((~ nose[498]) | sel[498]), ((~ nose[497]) | sel[497]), ((~ nose[496]) | sel[496]), ((~ nose[495]) | sel[495]), ((~ nose[494]) | sel[494]), ((~ nose[493]) | sel[493]), ((~ nose[492]) | sel[492]), ((~ nose[491]) | sel[491]), ((~ nose[490]) | sel[490]), ((~ nose[489]) | sel[489]), ((~ nose[488]) | sel[488]), ((~ nose[487]) | sel[487]), ((~ nose[486]) | sel[486]), ((~ nose[485]) | sel[485]), ((~ nose[484]) | sel[484]), ((~ nose[483]) | sel[483]), ((~ nose[482]) | sel[482]), ((~ nose[481]) | sel[481]), ((~ nose[480]) | sel[480]), ((~ nose[479]) | sel[479]), ((~ nose[478]) | sel[478]), ((~ nose[477]) | sel[477]), ((~ nose[476]) | sel[476]), ((~ nose[475]) | sel[475]), ((~ nose[474]) | sel[474]), ((~ nose[473]) | sel[473]), ((~ nose[472]) | sel[472]), ((~ nose[471]) | sel[471]), ((~ nose[470]) | sel[470]), ((~ nose[469]) | sel[469]), ((~ nose[468]) | sel[468]), ((~ nose[467]) | sel[467]), ((~ nose[466]) | sel[466]), ((~ nose[465]) | sel[465]), ((~ nose[464]) | sel[464]), ((~ nose[463]) | sel[463]), ((~ nose[462]) | sel[462]), ((~ nose[461]) | sel[461]), ((~ nose[460]) | sel[460]), ((~ nose[459]) | sel[459]), ((~ nose[458]) | sel[458]), ((~ nose[457]) | sel[457]), ((~ nose[456]) | sel[456]), ((~ nose[455]) | sel[455]), ((~ nose[454]) | sel[454]), (
(~ nose[453]) | sel[453]), ((~ nose[452]) | sel[452]), ((~ nose[451]) | sel[451]), ((~ nose[450]) | sel[450]), ((~ nose[449]) | sel[449]), ((~ nose[448]) | sel[448]), ((~ nose[447]) | sel[447]), ((~ nose[446]) | sel[446]), ((~ nose[445]) | sel[445]), ((~ nose[444]) | sel[444]), ((~ nose[443]) | sel[443]), ((~ nose[442]) | sel[442]), ((~ nose[441]) | sel[441]), ((~ nose[440]) | sel[440]), ((~ nose[439]) | sel[439]), ((~ nose[438]) | sel[438]), ((~ nose[437]) | sel[437]), ((~ nose[436]) | sel[436]), ((~ nose[435]) | sel[435]), ((~ nose[434]) | sel[434]), ((~ nose[433]) | sel[433]), ((~ nose[432]) | sel[432]), ((~ nose[431]) | sel[431]), ((~ nose[430]) | sel[430]), ((~ nose[429]) | sel[429]), ((~ nose[428]) | sel[428]), ((~ nose[427]) | sel[427]), ((~ nose[426]) | sel[426]), ((~ nose[425]) | sel[425]), ((~ nose[424]) | sel[424]), ((~ nose[423]) | sel[423]), ((~ nose[422]) | sel[422]), ((~ nose[421]) | sel[421]), ((~ nose[420]) | sel[420]), ((~ nose[419]) | sel[419]), ((~ nose[418]) | sel[418]), ((~ nose[417]) | sel[417]), ((~ nose[416]) | sel[416]), ((~ nose[415]) | sel[415]), ((~ nose[414]) | sel[414]), ((~ nose[413]) | sel[413]), ((~ nose[412]) | sel[412]), ((~ nose[411]) | sel[411]), ((~ nose[410]) | sel[410]), ((~ nose[409]) | sel[409]), ((~ nose[408]) | sel[408]), ((~ nose[407]) | sel[407]), ((~ nose[406]) | sel[406]), ((~ nose[405]) | sel[405]), ((~ nose[404]) | sel[404]), ((~ nose[403]) | sel[403]), ((~ nose[402]) | sel[402]), ((~ nose[401]) | sel[401]), ((~ nose[400]) | sel[400]), ((~ nose[399]) | sel[399]), ((~ nose[398]) | sel[398]), ((~ nose[397]) | sel[397]), ((~ nose[396]) | sel[396]), ((~ nose[395]) | sel[395]), ((~ nose[394]) | sel[394]), ((~ nose[393]) | sel[393]), ((~ nose[392]) | sel[392]), ((~ nose[391]) | sel[391]), ((~ nose[390]) | sel[390]), ((~ nose[389]) | sel[389]), ((~ nose[388]) | sel[388]), ((~ nose[387]) | sel[387]), ((~ nose[386]) | sel[386]), ((~ nose[385]) | sel[385]), ((~ nose[384]) | sel[384]), ((~ nose[383]) | sel[383]), ((~ nose[382]) | sel[382]), ((~ nose[381]) | sel[381]), ((~ nose[380]
) | sel[380]), ((~ nose[379]) | sel[379]), ((~ nose[378]) | sel[378]), ((~ nose[377]) | sel[377]), ((~ nose[376]) | sel[376]), ((~ nose[375]) | sel[375]), ((~ nose[374]) | sel[374]), ((~ nose[373]) | sel[373]), ((~ nose[372]) | sel[372]), ((~ nose[371]) | sel[371]), ((~ nose[370]) | sel[370]), ((~ nose[369]) | sel[369]), ((~ nose[368]) | sel[368]), ((~ nose[367]) | sel[367]), ((~ nose[366]) | sel[366]), ((~ nose[365]) | sel[365]), ((~ nose[364]) | sel[364]), ((~ nose[363]) | sel[363]), ((~ nose[362]) | sel[362]), ((~ nose[361]) | sel[361]), ((~ nose[360]) | sel[360]), ((~ nose[359]) | sel[359]), ((~ nose[358]) | sel[358]), ((~ nose[357]) | sel[357]), ((~ nose[356]) | sel[356]), ((~ nose[355]) | sel[355]), ((~ nose[354]) | sel[354]), ((~ nose[353]) | sel[353]), ((~ nose[352]) | sel[352]), ((~ nose[351]) | sel[351]), ((~ nose[350]) | sel[350]), ((~ nose[349]) | sel[349]), ((~ nose[348]) | sel[348]), ((~ nose[347]) | sel[347]), ((~ nose[346]) | sel[346]), ((~ nose[345]) | sel[345]), ((~ nose[344]) | sel[344]), ((~ nose[343]) | sel[343]), ((~ nose[342]) | sel[342]), ((~ nose[341]) | sel[341]), ((~ nose[340]) | sel[340]), ((~ nose[339]) | sel[339]), ((~ nose[338]) | sel[338]), ((~ nose[337]) | sel[337]), ((~ nose[336]) | sel[336]), ((~ nose[335]) | sel[335]), ((~ nose[334]) | sel[334]), ((~ nose[333]) | sel[333]), ((~ nose[332]) | sel[332]), ((~ nose[331]) | sel[331]), ((~ nose[330]) | sel[330]), ((~ nose[329]) | sel[329]), ((~ nose[328]) | sel[328]), ((~ nose[327]) | sel[327]), ((~ nose[326]) | sel[326]), ((~ nose[325]) | sel[325]), ((~ nose[324]) | sel[324]), ((~ nose[323]) | sel[323]), ((~ nose[322]) | sel[322]), ((~ nose[321]) | sel[321]), ((~ nose[320]) | sel[320]), ((~ nose[319]) | sel[319]), ((~ nose[318]) | sel[318]), ((~ nose[317]) | sel[317]), ((~ nose[316]) | sel[316]), ((~ nose[315]) | sel[315]), ((~ nose[314]) | sel[314]), ((~ nose[313]) | sel[313]), ((~ nose[312]) | sel[312]), ((~ nose[311]) | sel[311]), ((~ nose[310]) | sel[310]), ((~ nose[309]) | sel[309]), ((~ nose[308]) | sel[308]), ((~ nose[307]) | sel[307]
), ((~ nose[306]) | sel[306]), ((~ nose[305]) | sel[305]), ((~ nose[304]) | sel[304]), ((~ nose[303]) | sel[303]), ((~ nose[302]) | sel[302]), ((~ nose[301]) | sel[301]), ((~ nose[300]) | sel[300]), ((~ nose[299]) | sel[299]), ((~ nose[298]) | sel[298]), ((~ nose[297]) | sel[297]), ((~ nose[296]) | sel[296]), ((~ nose[295]) | sel[295]), ((~ nose[294]) | sel[294]), ((~ nose[293]) | sel[293]), ((~ nose[292]) | sel[292]), ((~ nose[291]) | sel[291]), ((~ nose[290]) | sel[290]), ((~ nose[289]) | sel[289]), ((~ nose[288]) | sel[288]), ((~ nose[287]) | sel[287]), ((~ nose[286]) | sel[286]), ((~ nose[285]) | sel[285]), ((~ nose[284]) | sel[284]), ((~ nose[283]) | sel[283]), ((~ nose[282]) | sel[282]), ((~ nose[281]) | sel[281]), ((~ nose[280]) | sel[280]), ((~ nose[279]) | sel[279]), ((~ nose[278]) | sel[278]), ((~ nose[277]) | sel[277]), ((~ nose[276]) | sel[276]), ((~ nose[275]) | sel[275]), ((~ nose[274]) | sel[274]), ((~ nose[273]) | sel[273]), ((~ nose[272]) | sel[272]), ((~ nose[271]) | sel[271]), ((~ nose[270]) | sel[270]), ((~ nose[269]) | sel[269]), ((~ nose[268]) | sel[268]), ((~ nose[267]) | sel[267]), ((~ nose[266]) | sel[266]), ((~ nose[265]) | sel[265]), ((~ nose[264]) | sel[264]), ((~ nose[263]) | sel[263]), ((~ nose[262]) | sel[262]), ((~ nose[261]) | sel[261]), ((~ nose[260]) | sel[260]), ((~ nose[259]) | sel[259]), ((~ nose[258]) | sel[258]), ((~ nose[257]) | sel[257]), ((~ nose[256]) | sel[256]), ((~ nose[255]) | sel[255]), ((~ nose[254]) | sel[254]), ((~ nose[253]) | sel[253]), ((~ nose[252]) | sel[252]), ((~ nose[251]) | sel[251]), ((~ nose[250]) | sel[250]), ((~ nose[249]) | sel[249]), ((~ nose[248]) | sel[248]), ((~ nose[247]) | sel[247]), ((~ nose[246]) | sel[246]), ((~ nose[245]) | sel[245]), ((~ nose[244]) | sel[244]), ((~ nose[243]) | sel[243]), ((~ nose[242]) | sel[242]), ((~ nose[241]) | sel[241]), ((~ nose[240]) | sel[240]), ((~ nose[239]) | sel[239]), ((~ nose[238]) | sel[238]), ((~ nose[237]) | sel[237]), ((~ nose[236]) | sel[236]), ((~ nose[235]) | sel[235]), ((~ nose[234]) | sel[234]), (
(~ nose[233]) | sel[233]), ((~ nose[232]) | sel[232]), ((~ nose[231]) | sel[231]), ((~ nose[230]) | sel[230]), ((~ nose[229]) | sel[229]), ((~ nose[228]) | sel[228]), ((~ nose[227]) | sel[227]), ((~ nose[226]) | sel[226]), ((~ nose[225]) | sel[225]), ((~ nose[224]) | sel[224]), ((~ nose[223]) | sel[223]), ((~ nose[222]) | sel[222]), ((~ nose[221]) | sel[221]), ((~ nose[220]) | sel[220]), ((~ nose[219]) | sel[219]), ((~ nose[218]) | sel[218]), ((~ nose[217]) | sel[217]), ((~ nose[216]) | sel[216]), ((~ nose[215]) | sel[215]), ((~ nose[214]) | sel[214]), ((~ nose[213]) | sel[213]), ((~ nose[212]) | sel[212]), ((~ nose[211]) | sel[211]), ((~ nose[210]) | sel[210]), ((~ nose[209]) | sel[209]), ((~ nose[208]) | sel[208]), ((~ nose[207]) | sel[207]), ((~ nose[206]) | sel[206]), ((~ nose[205]) | sel[205]), ((~ nose[204]) | sel[204]), ((~ nose[203]) | sel[203]), ((~ nose[202]) | sel[202]), ((~ nose[201]) | sel[201]), ((~ nose[200]) | sel[200]), ((~ nose[199]) | sel[199]), ((~ nose[198]) | sel[198]), ((~ nose[197]) | sel[197]), ((~ nose[196]) | sel[196]), ((~ nose[195]) | sel[195]), ((~ nose[194]) | sel[194]), ((~ nose[193]) | sel[193]), ((~ nose[192]) | sel[192]), ((~ nose[191]) | sel[191]), ((~ nose[190]) | sel[190]), ((~ nose[189]) | sel[189]), ((~ nose[188]) | sel[188]), ((~ nose[187]) | sel[187]), ((~ nose[186]) | sel[186]), ((~ nose[185]) | sel[185]), ((~ nose[184]) | sel[184]), ((~ nose[183]) | sel[183]), ((~ nose[182]) | sel[182]), ((~ nose[181]) | sel[181]), ((~ nose[180]) | sel[180]), ((~ nose[179]) | sel[179]), ((~ nose[178]) | sel[178]), ((~ nose[177]) | sel[177]), ((~ nose[176]) | sel[176]), ((~ nose[175]) | sel[175]), ((~ nose[174]) | sel[174]), ((~ nose[173]) | sel[173]), ((~ nose[172]) | sel[172]), ((~ nose[171]) | sel[171]), ((~ nose[170]) | sel[170]), ((~ nose[169]) | sel[169]), ((~ nose[168]) | sel[168]), ((~ nose[167]) | sel[167]), ((~ nose[166]) | sel[166]), ((~ nose[165]) | sel[165]), ((~ nose[164]) | sel[164]), ((~ nose[163]) | sel[163]), ((~ nose[162]) | sel[162]), ((~ nose[161]) | sel[161]), ((~ nose[160]
) | sel[160]), ((~ nose[159]) | sel[159]), ((~ nose[158]) | sel[158]), ((~ nose[157]) | sel[157]), ((~ nose[156]) | sel[156]), ((~ nose[155]) | sel[155]), ((~ nose[154]) | sel[154]), ((~ nose[153]) | sel[153]), ((~ nose[152]) | sel[152]), ((~ nose[151]) | sel[151]), ((~ nose[150]) | sel[150]), ((~ nose[149]) | sel[149]), ((~ nose[148]) | sel[148]), ((~ nose[147]) | sel[147]), ((~ nose[146]) | sel[146]), ((~ nose[145]) | sel[145]), ((~ nose[144]) | sel[144]), ((~ nose[143]) | sel[143]), ((~ nose[142]) | sel[142]), ((~ nose[141]) | sel[141]), ((~ nose[140]) | sel[140]), ((~ nose[139]) | sel[139]), ((~ nose[138]) | sel[138]), ((~ nose[137]) | sel[137]), ((~ nose[136]) | sel[136]), ((~ nose[135]) | sel[135]), ((~ nose[134]) | sel[134]), ((~ nose[133]) | sel[133]), ((~ nose[132]) | sel[132]), ((~ nose[131]) | sel[131]), ((~ nose[130]) | sel[130]), ((~ nose[129]) | sel[129]), ((~ nose[128]) | sel[128]), ((~ nose[127]) | sel[127]), ((~ nose[126]) | sel[126]), ((~ nose[125]) | sel[125]), ((~ nose[124]) | sel[124]), ((~ nose[123]) | sel[123]), ((~ nose[122]) | sel[122]), ((~ nose[121]) | sel[121]), ((~ nose[120]) | sel[120]), ((~ nose[119]) | sel[119]), ((~ nose[118]) | sel[118]), ((~ nose[117]) | sel[117]), ((~ nose[116]) | sel[116]), ((~ nose[115]) | sel[115]), ((~ nose[114]) | sel[114]), ((~ nose[113]) | sel[113]), ((~ nose[112]) | sel[112]), ((~ nose[111]) | sel[111]), ((~ nose[110]) | sel[110]), ((~ nose[109]) | sel[109]), ((~ nose[108]) | sel[108]), ((~ nose[107]) | sel[107]), ((~ nose[106]) | sel[106]), ((~ nose[105]) | sel[105]), ((~ nose[104]) | sel[104]), ((~ nose[103]) | sel[103]), ((~ nose[102]) | sel[102]), ((~ nose[101]) | sel[101]), ((~ nose[100]) | sel[100]), ((~ nose[99]) | sel[99]), ((~ nose[98]) | sel[98]), ((~ nose[97]) | sel[97]), ((~ nose[96]) | sel[96]), ((~ nose[95]) | sel[95]), ((~ nose[94]) | sel[94]), ((~ nose[93]) | sel[93]), ((~ nose[92]) | sel[92]), ((~ nose[91]) | sel[91]), ((~ nose[90]) | sel[90]), ((~ nose[89]) | sel[89]), ((~ nose[88]) | sel[88]), ((~ nose[87]) | sel[87]), ((~ nose[86]) |
 sel[86]), ((~ nose[85]) | sel[85]), ((~ nose[84]) | sel[84]), ((~ nose[83]) | sel[83]), ((~ nose[82]) | sel[82]), ((~ nose[81]) | sel[81]), ((~ nose[80]) | sel[80]), ((~ nose[79]) | sel[79]), ((~ nose[78]) | sel[78]), ((~ nose[77]) | sel[77]), ((~ nose[76]) | sel[76]), ((~ nose[75]) | sel[75]), ((~ nose[74]) | sel[74]), ((~ nose[73]) | sel[73]), ((~ nose[72]) | sel[72]), ((~ nose[71]) | sel[71]), ((~ nose[70]) | sel[70]), ((~ nose[69]) | sel[69]), ((~ nose[68]) | sel[68]), ((~ nose[67]) | sel[67]), ((~ nose[66]) | sel[66]), ((~ nose[65]) | sel[65]), ((~ nose[64]) | sel[64]), ((~ nose[63]) | sel[63]), ((~ nose[62]) | sel[62]), ((~ nose[61]) | sel[61]), ((~ nose[60]) | sel[60]), ((~ nose[59]) | sel[59]), ((~ nose[58]) | sel[58]), ((~ nose[57]) | sel[57]), ((~ nose[56]) | sel[56]), ((~ nose[55]) | sel[55]), ((~ nose[54]) | sel[54]), ((~ nose[53]) | sel[53]), ((~ nose[52]) | sel[52]), ((~ nose[51]) | sel[51]), ((~ nose[50]) | sel[50]), ((~ nose[49]) | sel[49]), ((~ nose[48]) | sel[48]), ((~ nose[47]) | sel[47]), ((~ nose[46]) | sel[46]), ((~ nose[45]) | sel[45]), ((~ nose[44]) | sel[44]), ((~ nose[43]) | sel[43]), ((~ nose[42]) | sel[42]), ((~ nose[41]) | sel[41]), ((~ nose[40]) | sel[40]), ((~ nose[39]) | sel[39]), ((~ nose[38]) | sel[38]), ((~ nose[37]) | sel[37]), ((~ nose[36]) | sel[36]), ((~ nose[35]) | sel[35]), ((~ nose[34]) | sel[34]), ((~ nose[33]) | sel[33]), ((~ nose[32]) | sel[32]), ((~ nose[31]) | sel[31]), ((~ nose[30]) | sel[30]), ((~ nose[29]) | sel[29]), ((~ nose[28]) | sel[28]), ((~ nose[27]) | sel[27]), ((~ nose[26]) | sel[26]), ((~ nose[25]) | sel[25]), ((~ nose[24]) | sel[24]), ((~ nose[23]) | sel[23]), ((~ nose[22]) | sel[22]), ((~ nose[21]) | sel[21]), ((~ nose[20]) | sel[20]), ((~ nose[19]) | sel[19]), ((~ nose[18]) | sel[18]), ((~ nose[17]) | sel[17]), ((~ nose[16]) | sel[16]), ((~ nose[15]) | sel[15]), ((~ nose[14]) | sel[14]), ((~ nose[13]) | sel[13]), ((~ nose[12]) | sel[12]), ((~ nose[11]) | sel[11]), ((~ nose[10]) | sel[10]), ((~ nose[9]) | sel[9]), ((~ nose[8]) | sel[8]), ((~ nose[7]) |
 sel[7]), ((~ nose[6]) | sel[6]), ((~ nose[5]) | sel[5]), ((~ nose[4]) | sel[4]), ((~ nose[3]) | sel[3]), ((~ nose[2]) | sel[2]), ((~ nose[1]) | sel[1]), ((~ nose[0]) | sel[0])},
		StageIn = StageIn_tmp,
		StageIn_tmp = {StageOut[575:552], DFFStage[239:216], StageOut[527:504], DFFStage[215:192], StageOut[479:432], DFFStage[191:168], StageOut[407:384], DFFStage[167:144], StageOut[359:336], DFFStage[143:120], StageOut[311:264], DFFStage[119:96], StageOut[239:216], DFFStage[95:72], StageOut[191:144], DFFStage[71:48], StageOut[119:96], DFFStage[47:24], StageOut[71:48], DFFStage[23:0], StageOut[23:0], {24{1'b0}}},
		StageOut = {(({StageIn[574:552], NumeratorIn[552]} & {24{selnose[575]}}) | (prestg[575:552] & {24{(~ selnose[575])}})), (({StageIn[550:528], NumeratorIn[529]} & {24{selnose[550]}}) | (prestg[551:528] & {24{(~ selnose[550])}})), (({StageIn[526:504], NumeratorIn[506]} & {24{selnose[525]}}) | (prestg[527:504] & {24{(~ selnose[525])}})), (({StageIn[502:480], NumeratorIn[483]} & {24{selnose[500]}}) | (prestg[503:480] & {24{(~ selnose[500])}})), (({StageIn[478:456], NumeratorIn[460]} & {24{selnose[475]}}) | (prestg[479:456] & {24{(~ selnose[475])}})), (({StageIn[454:432], NumeratorIn[437]} & {24{selnose[450]}}) | (prestg[455:432] & {24{(~ selnose[450])}})), (({StageIn[430:408], NumeratorIn[414]} & {24{selnose[425]}}) | (prestg[431:408] & {24{(~ selnose[425])}})), (({StageIn[406:384], NumeratorIn[391]} & {24{selnose[400]}}) | (prestg[407:384] & {24{(~ selnose[400])}})), (({StageIn[382:360], NumeratorIn[368]} & {24{selnose[375]}}) | (prestg[383:360] & {24{(~ selnose[375])}})), (({StageIn[358:336], NumeratorIn[345]} & {24{selnose[350]}}) | (prestg[359:336] & {24{(~ selnose[350])}})), (({StageIn[334:312], NumeratorIn[322]} & {24{selnose[325]}}) | (prestg[335:312] & {24{(~ selnose[325])}})), (({StageIn[310:288], NumeratorIn[299]} & {24{selnose[300]}}) | (prestg[311:288] & {24{(~ selnose[300])}})), (({StageIn[286:264], NumeratorIn[276]} & {24{selnose[275]}}) | (prestg[287:264] & {24{(~ selnose[275])}})), (({StageIn[262:240], NumeratorIn[253]} & {24{selnose[250]}}) | (prestg[263:240] & {24{(~ selnose[250])}})), (({StageIn[238:216], NumeratorIn[230]} & {24{selnose[225]}}) | (prestg[239:216] & {24{(~ selnose[225])}})), (({StageIn[214:192], NumeratorIn[207]} & {24{selnose[200]}}) | (prestg[215:192] & {24{(~ selnose[200])}})), (({StageIn[190:168], NumeratorIn[184]} & {24{selnose[175]}}) | (prestg[191:168] & {24{(~ selnose[175])}})), (({StageIn[166:144], NumeratorIn[161]} & {24{selnose[150]}}) | (prestg[167:144] & {24{(~ selnose[150])}})), (({StageIn[142:120], NumeratorIn[138]} & {24{selnose[125]}}) | (prestg[143:120] & {24{(~ selnose[125]
)}})), (({StageIn[118:96], NumeratorIn[115]} & {24{selnose[100]}}) | (prestg[119:96] & {24{(~ selnose[100])}})), (({StageIn[94:72], NumeratorIn[92]} & {24{selnose[75]}}) | (prestg[95:72] & {24{(~ selnose[75])}})), (({StageIn[70:48], NumeratorIn[69]} & {24{selnose[50]}}) | (prestg[71:48] & {24{(~ selnose[50])}})), (({StageIn[46:24], NumeratorIn[46]} & {24{selnose[25]}}) | (prestg[47:24] & {24{(~ selnose[25])}})), (({StageIn[22:0], NumeratorIn[23]} & {24{selnose[0]}}) | (prestg[23:0] & {24{(~ selnose[0])}}))},
		vcc_wire = 1'b1;
endmodule //divider_alt_u_div

//synthesis_resources = lut 324 reg 960 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  divider_sign_div_unsign
	( 
	aclr,
	clock,
	denominator,
	numerator,
	quotient,
	remainder) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   [23:0]  denominator;
	input   [23:0]  numerator;
	output   [23:0]  quotient;
	output   [23:0]  remainder;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [23:0]   wire_divider_quotient;
	wire  [23:0]   wire_divider_remainder;
	wire  [23:0]  norm_num;
	wire  [23:0]  protect_quotient;
	wire  [23:0]  protect_remainder;

	divider_alt_u_div   divider
	( 
	.aclr(aclr),
	.clock(clock),
	.denominator(denominator),
	.numerator(norm_num),
	.quotient(wire_divider_quotient),
	.remainder(wire_divider_remainder));
	assign
		norm_num = numerator,
		protect_quotient = wire_divider_quotient,
		protect_remainder = wire_divider_remainder,
		quotient = protect_quotient,
		remainder = protect_remainder;
endmodule //divider_sign_div_unsign

//synthesis_resources = lut 324 reg 960 
//synopsys translate_off
`timescale 1 ps / 1 ps
//synopsys translate_on
module  divider_lpm_divide
	( 
	aclr,
	clock,
	denom,
	numer,
	quotient,
	remain) /* synthesis synthesis_clearbox=1 */;
	input   aclr;
	input   clock;
	input   [23:0]  denom;
	input   [23:0]  numer;
	output   [23:0]  quotient;
	output   [23:0]  remain;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri0   aclr;
	tri0   clock;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire  [23:0]   wire_divider_quotient;
	wire  [23:0]   wire_divider_remainder;
	wire  [23:0]  numer_tmp;

	divider_sign_div_unsign   divider
	( 
	.aclr(aclr),
	.clock(clock),
	.denominator(denom),
	.numerator(numer_tmp),
	.quotient(wire_divider_quotient),
	.remainder(wire_divider_remainder));
	assign
		numer_tmp = numer,
		quotient = wire_divider_quotient,
		remain = wire_divider_remainder;
endmodule //divider_lpm_divide
//VALID FILE


// synopsys translate_off
`timescale 1 ps / 1 ps
// synopsys translate_on
module divider (
	aclr,
	clock,
	denom,
	numer,
	quotient,
	remain)/* synthesis synthesis_clearbox = 1 */;

	input	  aclr;
	input	  clock;
	input	[23:0]  denom;
	input	[23:0]  numer;
	output	[23:0]  quotient;
	output	[23:0]  remain;

	wire [23:0] sub_wire0;
	wire [23:0] sub_wire1;
	wire [23:0] quotient = sub_wire0[23:0];
	wire [23:0] remain = sub_wire1[23:0];

	divider_lpm_divide	divider_lpm_divide_component (
				.aclr (aclr),
				.clock (clock),
				.denom (denom),
				.numer (numer),
				.quotient (sub_wire0),
				.remain (sub_wire1));

endmodule

// ============================================================
// CNX file retrieval info
// ============================================================
// Retrieval info: PRIVATE: INTENDED_DEVICE_FAMILY STRING "Cyclone V"
// Retrieval info: PRIVATE: PRIVATE_LPM_REMAINDERPOSITIVE STRING "TRUE"
// Retrieval info: PRIVATE: PRIVATE_MAXIMIZE_SPEED NUMERIC "-1"
// Retrieval info: PRIVATE: SYNTH_WRAPPER_GEN_POSTFIX STRING "1"
// Retrieval info: PRIVATE: USING_PIPELINE NUMERIC "1"
// Retrieval info: PRIVATE: VERSION_NUMBER NUMERIC "2"
// Retrieval info: PRIVATE: new_diagram STRING "1"
// Retrieval info: LIBRARY: lpm lpm.lpm_components.all
// Retrieval info: CONSTANT: LPM_DREPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: LPM_HINT STRING "LPM_REMAINDERPOSITIVE=TRUE"
// Retrieval info: CONSTANT: LPM_NREPRESENTATION STRING "UNSIGNED"
// Retrieval info: CONSTANT: LPM_PIPELINE NUMERIC "10"
// Retrieval info: CONSTANT: LPM_TYPE STRING "LPM_DIVIDE"
// Retrieval info: CONSTANT: LPM_WIDTHD NUMERIC "24"
// Retrieval info: CONSTANT: LPM_WIDTHN NUMERIC "24"
// Retrieval info: USED_PORT: aclr 0 0 0 0 INPUT NODEFVAL "aclr"
// Retrieval info: USED_PORT: clock 0 0 0 0 INPUT NODEFVAL "clock"
// Retrieval info: USED_PORT: denom 0 0 24 0 INPUT NODEFVAL "denom[23..0]"
// Retrieval info: USED_PORT: numer 0 0 24 0 INPUT NODEFVAL "numer[23..0]"
// Retrieval info: USED_PORT: quotient 0 0 24 0 OUTPUT NODEFVAL "quotient[23..0]"
// Retrieval info: USED_PORT: remain 0 0 24 0 OUTPUT NODEFVAL "remain[23..0]"
// Retrieval info: CONNECT: @aclr 0 0 0 0 aclr 0 0 0 0
// Retrieval info: CONNECT: @clock 0 0 0 0 clock 0 0 0 0
// Retrieval info: CONNECT: @denom 0 0 24 0 denom 0 0 24 0
// Retrieval info: CONNECT: @numer 0 0 24 0 numer 0 0 24 0
// Retrieval info: CONNECT: quotient 0 0 24 0 @quotient 0 0 24 0
// Retrieval info: CONNECT: remain 0 0 24 0 @remain 0 0 24 0
// Retrieval info: GEN_FILE: TYPE_NORMAL divider.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL divider.inc TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL divider.cmp TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL divider.bsf TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL divider_inst.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL divider_bb.v TRUE
// Retrieval info: GEN_FILE: TYPE_NORMAL divider_syn.v TRUE
// Retrieval info: LIB_FILE: lpm
