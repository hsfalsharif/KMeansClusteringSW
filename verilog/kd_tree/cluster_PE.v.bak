module cluster_PE #(parameter dim = 3, data_range = 255, max_n = 1000)(input clk, rst, en, inc, parent_switch, child_switch, receive_point, sort,
input [dim*$clog2(data_range) - 1:0] point_in, parent_centre, child_centre,
input [$clog2(dim) - 1:0] axis_in,
output stable, go_left, 
output [$clog2(dim) - 1:0] axis_out, 
output [$clog2(data_range*dim) - 1:0] total_dist_out,
output [$clog2(data_range) - 1:0] single_dist_out,
output [dim*$clog2(data_range) - 1:0] centre_out, point_out
output [$clog2(dim) - 1:0] axis_out);

localparam  dim_size = $clog2(data_range), center_size = dim*dim_size, counter_size = $clog2(max_n), acc_size = $clog2(dim_size*max_n), 
dist_size = $clog2(data_range*dim), axis_size = $clog2(dim);

// dim is number of dimensions, data_range is maximum allowable range for the data, max_n is the max number of data points,
// dim_size is the number of bits required to represent the data range, center_size is the number of bits to represent
// the centre combining by concatenating all of the dimensions, counter_size is the number of bits required to represent the
// maximum number of points, acc_size is the number of bits required to represent an accumulator, dist_size is the number of
// bits required to represent the maximum allowable distance, axis_size is the number of bits required to represent the
// number of axes.

reg [acc_size - 1:0] accX, accY, accZ;
reg [counter_size - 1:0] counter;
reg [center_size - 1:0] old_centre, new_centre, point;
reg [axis_size - 1:0] axis; // how to determine the axis for each cluster_PE??
reg [dist_size - 1:0] dist_out;
// single dist here
// will need distance module also
always@(posedge clk) begin
	if(rst) begin
		accX <= {acc_size{1'b0}};
		accY <= {acc_size{1'b0}};
		accZ <= {acc_size{1'b0}};
		counter <= {counter_size{1'b0}};
		old_centre <= {center_size{1'b0}};
		new_centre <= {center_size{1'b0}};
		point <= {center_size{1'b0}};
		axis <= {axis_size{1'b0}};
	end
	else if (en) begin
		if (receive_point) begin
			point <= point_in;
			
		end
		if (inc) begin
			accX <= point[0+:dim_size]; // array order correct??
			accY <= point[dim_size+: dim_size];
			accZ <= point[2*dim_size+: dim_size];
			counter <= counter + 1'b1;
		end
	end
end

endmodule
